# QOPIQ Complete System Verification Script
# Ejecuta todas las verificaciones del sistema de forma secuencial

Write-Host "üöÄ QOPIQ Complete System Verification" -ForegroundColor Green
Write-Host "=======================================" -ForegroundColor Green
Write-Host "This script will verify the entire QOPIQ system step by step." -ForegroundColor White
Write-Host ""

# Variables
$ScriptPath = Split-Path -Parent $MyInvocation.MyCommand.Path
$LogFile = Join-Path $ScriptPath "verification-log.txt"

# Funci√≥n para logging
function Write-Log {
    param($Message, $Color = "White")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] $Message"
    Write-Host $logMessage -ForegroundColor $Color
    Add-Content -Path $LogFile -Value $logMessage
}

# Funci√≥n para ejecutar script y capturar resultado
function Invoke-VerificationScript {
    param($ScriptName, $Description)
    
    Write-Log "üîÑ Starting: $Description" "Yellow"
    $scriptPath = Join-Path $ScriptPath $ScriptName
    
    if (-not (Test-Path $scriptPath)) {
        Write-Log "‚ùå Script not found: $ScriptName" "Red"
        return $false
    }
    
    try {
        $result = & $scriptPath
        Write-Log "‚úÖ Completed: $Description" "Green"
        return $true
    }
    catch {
        Write-Log "‚ùå Failed: $Description - $($_.Exception.Message)" "Red"
        return $false
    }
}

# Funci√≥n para pausa interactiva
function Wait-UserInput {
    param($Message)
    Write-Host "`n$Message" -ForegroundColor Cyan
    Write-Host "Press any key to continue or Ctrl+C to abort..." -ForegroundColor Yellow
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
}

# Inicializar log
if (Test-Path $LogFile) { Remove-Item $LogFile }
Write-Log "üöÄ QOPIQ System Verification Started" "Green"

Write-Host "üìã Verification Plan:" -ForegroundColor Cyan
Write-Host "=====================" -ForegroundColor Cyan
Write-Host "Phase 1: Backend Verification" -ForegroundColor White
Write-Host "Phase 2: Frontend Verification" -ForegroundColor White
Write-Host "Phase 3: Test Users Setup" -ForegroundColor White
Write-Host "Phase 4: End-to-End Testing" -ForegroundColor White
Write-Host "Phase 5: Security Validation" -ForegroundColor White

Wait-UserInput "Ready to start Phase 1: Backend Verification?"

# Phase 1: Backend Verification
Write-Log "üîß PHASE 1: Backend Verification" "Magenta"
Write-Host "`nüîß PHASE 1: Backend Verification" -ForegroundColor Magenta
Write-Host "=================================" -ForegroundColor Magenta

$backendResult = Invoke-VerificationScript "verify-backend.ps1" "Backend System Check"

if (-not $backendResult) {
    Write-Log "‚ùå Backend verification failed. Cannot continue." "Red"
    Write-Host "‚ùå Backend verification failed. Please check the backend setup." -ForegroundColor Red
    exit 1
}

Wait-UserInput "Backend verification completed. Ready for Phase 2: Frontend Verification?"

# Phase 2: Frontend Verification
Write-Log "üé® PHASE 2: Frontend Verification" "Magenta"
Write-Host "`nüé® PHASE 2: Frontend Verification" -ForegroundColor Magenta
Write-Host "==================================" -ForegroundColor Magenta

$frontendResult = Invoke-VerificationScript "verify-frontend.ps1" "Frontend System Check"

if (-not $frontendResult) {
    Write-Log "‚ö†Ô∏è Frontend verification had issues, but continuing..." "Yellow"
    Write-Host "‚ö†Ô∏è Frontend verification had issues, but continuing..." -ForegroundColor Yellow
}

Wait-UserInput "Frontend verification completed. Ready for Phase 3: Test Users Setup?"

# Phase 3: Test Users Setup
Write-Log "üë• PHASE 3: Test Users Setup" "Magenta"
Write-Host "`nüë• PHASE 3: Test Users Setup" -ForegroundColor Magenta
Write-Host "=============================" -ForegroundColor Magenta

$usersResult = Invoke-VerificationScript "setup-test-users.ps1" "Test Users Creation"

if (-not $usersResult) {
    Write-Log "‚ö†Ô∏è Test users setup had issues, but continuing..." "Yellow"
    Write-Host "‚ö†Ô∏è Test users setup had issues, but continuing..." -ForegroundColor Yellow
}

# Phase 4: Manual Testing Instructions
Write-Log "üß™ PHASE 4: Manual Testing Instructions" "Magenta"
Write-Host "`nüß™ PHASE 4: Manual Testing Instructions" -ForegroundColor Magenta
Write-Host "=======================================" -ForegroundColor Magenta

Write-Host "`nüìù Manual Testing Checklist:" -ForegroundColor Yellow
Write-Host "=============================" -ForegroundColor Yellow

$testChecklist = @(
    "‚úÖ Login with SuperAdmin (admin@qopiq.com / Admin123!)",
    "‚úÖ Verify SuperAdmin dashboard shows global metrics",
    "‚úÖ Login with CompanyAdmin (companyadmin@qopiq.com / CompanyAdmin123!)",
    "‚úÖ Verify CompanyAdmin dashboard shows company-specific data",
    "‚úÖ Login with ProjectManager (pm@qopiq.com / ProjectManager123!)",
    "‚úÖ Verify ProjectManager dashboard shows assigned projects",
    "‚úÖ Login with Viewer (viewer@qopiq.com / Viewer123!)",
    "‚úÖ Verify Viewer dashboard shows read-only access",
    "‚úÖ Test report generation from Reports page",
    "‚úÖ Test report download functionality",
    "‚úÖ Test calendar view and scheduled reports",
    "‚úÖ Test template gallery and preview functionality",
    "‚úÖ Verify role-based access restrictions"
)

foreach ($item in $testChecklist) {
    Write-Host $item -ForegroundColor White
}

Write-Host "`nüåê Testing URLs:" -ForegroundColor Cyan
Write-Host "================" -ForegroundColor Cyan
Write-Host "Frontend: http://localhost:5000" -ForegroundColor White
Write-Host "Backend API: http://localhost:5278" -ForegroundColor White
Write-Host "Swagger Docs: http://localhost:5278/swagger" -ForegroundColor White

Wait-UserInput "Complete the manual testing checklist above, then continue to Phase 5."

# Phase 5: Security Validation
Write-Log "üîí PHASE 5: Security Validation" "Magenta"
Write-Host "`nüîí PHASE 5: Security Validation" -ForegroundColor Magenta
Write-Host "===============================" -ForegroundColor Magenta

Write-Host "`nüîê Security Checklist:" -ForegroundColor Yellow
Write-Host "======================" -ForegroundColor Yellow

$securityChecklist = @(
    "‚úÖ JWT tokens are generated correctly for each user",
    "‚úÖ API endpoints require valid JWT authentication",
    "‚úÖ Role-based authorization works (Admin vs Viewer access)",
    "‚úÖ Multi-tenant data isolation is enforced",
    "‚úÖ File downloads are secured with proper validation",
    "‚úÖ Sensitive endpoints are protected from unauthorized access",
    "‚úÖ Password requirements are enforced",
    "‚úÖ Session management works correctly"
)

foreach ($item in $securityChecklist) {
    Write-Host $item -ForegroundColor White
}

# Final Summary
Write-Log "üìä VERIFICATION SUMMARY" "Green"
Write-Host "`nüìä VERIFICATION SUMMARY" -ForegroundColor Green
Write-Host "========================" -ForegroundColor Green

Write-Host "‚úÖ Backend Verification: " -NoNewline -ForegroundColor Green
Write-Host $(if ($backendResult) { "PASSED" } else { "FAILED" }) -ForegroundColor $(if ($backendResult) { "Green" } else { "Red" })

Write-Host "‚úÖ Frontend Verification: " -NoNewline -ForegroundColor Green
Write-Host $(if ($frontendResult) { "PASSED" } else { "WARNING" }) -ForegroundColor $(if ($frontendResult) { "Green" } else { "Yellow" })

Write-Host "‚úÖ Test Users Setup: " -NoNewline -ForegroundColor Green
Write-Host $(if ($usersResult) { "PASSED" } else { "WARNING" }) -ForegroundColor $(if ($usersResult) { "Green" } else { "Yellow" })

Write-Host "‚úÖ Manual Testing: PENDING USER VALIDATION" -ForegroundColor Yellow
Write-Host "‚úÖ Security Testing: PENDING USER VALIDATION" -ForegroundColor Yellow

if ($backendResult) {
    Write-Host "`nüéâ QOPIQ System Verification COMPLETED!" -ForegroundColor Green
    Write-Host "The system is ready for production deployment." -ForegroundColor Green
    
    Write-Log "üéâ System verification completed successfully" "Green"
    
    Write-Host "`nüöÄ Next Steps:" -ForegroundColor Cyan
    Write-Host "==============" -ForegroundColor Cyan
    Write-Host "1. Complete manual testing checklist" -ForegroundColor White
    Write-Host "2. Validate security requirements" -ForegroundColor White
    Write-Host "3. Prepare production configuration" -ForegroundColor White
    Write-Host "4. Deploy to production environment" -ForegroundColor White
    Write-Host "5. Conduct final user acceptance testing" -ForegroundColor White
} else {
    Write-Host "`n‚ö†Ô∏è System verification completed with issues." -ForegroundColor Yellow
    Write-Host "Please review the log file: $LogFile" -ForegroundColor Yellow
    Write-Log "‚ö†Ô∏è System verification completed with issues" "Yellow"
}

Write-Host "`nüìÑ Full verification log saved to: $LogFile" -ForegroundColor Cyan
Write-Host "üëã Verification process completed." -ForegroundColor Green
