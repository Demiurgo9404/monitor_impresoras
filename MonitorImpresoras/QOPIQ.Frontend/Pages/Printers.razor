@page "/printers"
@using QOPIQ.Frontend.Shared
@inject IPrinterService PrinterService
@inject NavigationManager Nav

<h3>üñ®Ô∏è Gesti√≥n de Impresoras</h3>

<div class="d-flex justify-content-between mb-3">
    <button class="btn btn-success" @onclick="NavigateToForm">‚ûï Nueva Impresora</button>
    <button class="btn btn-outline-secondary" @onclick="CargarDatos">üîÑ Actualizar</button>
</div>

@if (printers == null)
{
    <p>Cargando...</p>
}
else if (!printers.Any())
{
    <p>No hay impresoras registradas.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Nombre</th>
                    <th>Modelo</th>
                    <th>Direcci√≥n IP</th>
                    <th>Ubicaci√≥n</th>
                    <th>Estado</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var printer in printers)
                {
                    <tr>
                        <td>@printer.Name</td>
                        <td>@printer.Model</td>
                        <td>@printer.IpAddress</td>
                        <td>@printer.Location</td>
                        <td>
                            <span class="badge @(printer.IsActive ? "bg-success" : "bg-secondary")">
                                @(printer.IsActive ? "Activa" : "Inactiva")
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick="() => EditPrinter(printer.Id)">
                                <i class="bi bi-pencil"></i> Editar
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeletePrinter(printer.Id)">
                                <i class="bi bi-trash"></i> Eliminar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<PrinterDto> printers = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        try
        {
            printers = (await PrinterService.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            // Manejar el error
            Console.WriteLine($"Error al cargar las impresoras: {ex.Message}");
        }
    }

    private void NavigateToForm()
    {
        Nav.NavigateTo("/printers/form");
    }

    private void EditPrinter(Guid id)
    {
        Nav.NavigateTo($"/printers/form/{id}");
    }

    private async Task DeletePrinter(Guid id)
    {
        try
        {
            await PrinterService.DeleteAsync(id);
            await CargarDatos();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar la impresora: {ex.Message}");
        }
    }
}
