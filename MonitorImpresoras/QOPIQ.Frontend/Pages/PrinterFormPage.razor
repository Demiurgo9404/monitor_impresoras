@page "/printers/form"
@page "/printers/form/{Id:guid}"
@using QOPIQ.Application.DTOs
@inject IPrinterService PrinterService
@inject NavigationManager Nav

<PageTitle>@(IsEdit ? "Editar Impresora" : "Nueva Impresora")</PageTitle>

<div class="card">
    <div class="card-header">
        <h3>@(IsEdit ? "✏️ Editar Impresora" : "➕ Nueva Impresora")</h3>
    </div>
    <div class="card-body">
        @if (Printer != null)
        {
            <PrinterForm 
                Printer="@Printer" 
                OnSubmit="HandleSubmit"
                OnCancel="HandleCancel" />
        }
    </div>
</div>

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@code {
    [Parameter] public Guid? Id { get; set; }
    
    private bool IsEdit => Id != null;
    private string? errorMessage;
    private PrinterDto? Printer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            if (IsEdit && Id.HasValue)
            {
                Printer = await PrinterService.GetByIdAsync(Id.Value);
            }
            else
            {
                Printer = new PrinterDto
                {
                    Id = Guid.Empty,
                    Status = PrinterStatus.Online,
                    UpdatedAt = DateTime.UtcNow
                };
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar la impresora: {ex.Message}";
        }
    }

    private async Task HandleSubmit(PrinterDto printer)
    {
        try
        {
            errorMessage = null;
            
            if (IsEdit && printer is not null)
            {
                var updateDto = new PrinterUpdateDto
                {
                    Id = printer.Id,
                    Name = printer.Name,
                    Model = printer.Model,
                    IpAddress = printer.IpAddress,
                    Location = printer.Location,
                    Status = printer.Status,
                    IsActive = true
                };
                await PrinterService.UpdateAsync(updateDto);
            }
            else
            {
                var createDto = new PrinterCreateDto
                {
                    Name = printer.Name,
                    Model = printer.Model,
                    IpAddress = printer.IpAddress,
                    Location = printer.Location,
                };
                await PrinterService.CreateAsync(createDto);
            }
            
            Nav.NavigateTo("/printers");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar la impresora: {ex.Message}";
        }
    }

    private void HandleCancel()
    {
        Nav.NavigateTo("/printers");
    }
}
