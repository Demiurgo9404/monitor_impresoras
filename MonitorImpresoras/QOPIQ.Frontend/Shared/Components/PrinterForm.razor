@using QOPIQ.Application.DTOs
@using QOPIQ.Domain.Enums
@using System.ComponentModel.DataAnnotations

<EditForm Model="@Printer" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="name">Nombre *</label>
        <InputText id="name" @bind-Value="Printer.Name" class="form-control" />
        <ValidationMessage For="@(() => Printer.Name)" />
    </div>

    <div class="form-group mb-3">
        <label for="ipAddress">Dirección IP *</label>
        <InputText id="ipAddress" @bind-Value="Printer.IpAddress" class="form-control" />
        <ValidationMessage For="@(() => Printer.IpAddress)" />
    </div>

    <div class="form-group mb-3">
        <label for="location">Ubicación</label>
        <InputText id="location" @bind-Value="Printer.Location" class="form-control" />
    </div>

    <div class="form-group mb-3">
        <label for="status">Estado</label>
        <InputSelect id="status" @bind-Value="Printer.Status" class="form-select">
            @foreach (var status in Enum.GetValues<PrinterStatus>())
            {
                <option value="@status">@status.ToString()</option>
            }
        </InputSelect>
    </div>

    <div class="form-actions mt-4">
        <button type="submit" class="btn btn-primary">@(Printer.Id == Guid.Empty ? "Crear" : "Actualizar")</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="HandleCancel">Cancelar</button>
    </div>
</EditForm>

@code {
    [Parameter] 
    public PrinterDto Printer { get; set; } = new();
    
    [Parameter]
    public EventCallback<PrinterDto> OnSubmit { get; set; }
    
    [Parameter]
    public EventCallback OnCancel { get; set; }

    private async Task HandleValidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(Printer);
        }
    }

    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }
}
