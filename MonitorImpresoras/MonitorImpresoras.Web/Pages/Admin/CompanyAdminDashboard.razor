@page "/company/dashboard"
@inject ApiService ApiService
@inject TenantService TenantService
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "CompanyAdmin")]

<PageTitle>Company Dashboard - QOPIQ</PageTitle>

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-0 text-gradient">
                        <i class="fas fa-building text-primary me-2"></i>
                        Dashboard Empresarial
                    </h1>
                    <p class="text-muted mb-0">Gestión completa de @(companyInfo?.Name ?? "su empresa")</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary btn-modern" @onclick="RefreshData">
                        <i class="fas fa-sync-alt @(isLoading ? "fa-spin" : "")"></i>
                        Actualizar
                    </button>
                    <button class="btn btn-success btn-modern" @onclick="ShowCreateProjectModal">
                        <i class="fas fa-plus me-1"></i>
                        Nuevo Proyecto
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Company Stats -->
    @if (companyStats != null)
    {
        <div class="row mb-4">
            <div class="col-xl-3 col-md-6 mb-3">
                <div class="card metric-card gradient-primary">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="metric-icon primary me-3">
                                <i class="fas fa-briefcase"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="metric-value text-white">@companyStats.ActiveProjects</div>
                                <div class="metric-label text-white-50">Proyectos Activos</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6 mb-3">
                <div class="card metric-card gradient-success">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="metric-icon success me-3">
                                <i class="fas fa-users"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="metric-value text-white">@companyStats.TotalUsers</div>
                                <div class="metric-label text-white-50">Usuarios</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6 mb-3">
                <div class="card metric-card gradient-info">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="metric-icon info me-3">
                                <i class="fas fa-file-alt"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="metric-value text-white">@companyStats.MonthlyReports</div>
                                <div class="metric-label text-white-50">Reportes del Mes</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6 mb-3">
                <div class="card metric-card gradient-warning">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="metric-icon warning me-3">
                                <i class="fas fa-print"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="metric-value text-white">@companyStats.TotalPrinters</div>
                                <div class="metric-label text-white-50">Impresoras</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row">
        <!-- Project Management -->
        <div class="col-lg-8 mb-4">
            <div class="card shadow-custom">
                <div class="card-header bg-white d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-briefcase text-primary me-2"></i>
                        Gestión de Proyectos
                    </h5>
                    <div class="d-flex gap-2">
                        <button class="btn btn-sm btn-outline-primary" @onclick="ShowProjectsReport">
                            <i class="fas fa-chart-bar me-1"></i>
                            Reporte
                        </button>
                        <button class="btn btn-sm btn-primary" @onclick="ShowCreateProjectModal">
                            <i class="fas fa-plus me-1"></i>
                            Nuevo
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (projects?.Any() == true)
                    {
                        <div class="row g-3">
                            @foreach (var project in projects)
                            {
                                <div class="col-md-6 col-xl-4">
                                    <div class="card project-card h-100 border-2 @(project.IsActive ? "border-success" : "border-secondary")">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <h6 class="card-title mb-0">@project.Name</h6>
                                                <span class="status-badge status-@(project.IsActive ? "active" : "inactive")">
                                                    @(project.IsActive ? "Activo" : "Inactivo")
                                                </span>
                                            </div>
                                            <p class="card-text text-muted small">@project.ClientName</p>
                                            
                                            <div class="project-metrics mb-3">
                                                <div class="d-flex justify-content-between mb-1">
                                                    <small class="text-muted">Impresoras:</small>
                                                    <span class="badge bg-info">@project.PrinterCount</span>
                                                </div>
                                                <div class="d-flex justify-content-between mb-1">
                                                    <small class="text-muted">Usuarios:</small>
                                                    <span class="badge bg-success">@project.UserCount</span>
                                                </div>
                                                <div class="d-flex justify-content-between">
                                                    <small class="text-muted">Reportes:</small>
                                                    <span class="badge bg-primary">@project.ReportCount</span>
                                                </div>
                                            </div>

                                            <div class="d-flex gap-1">
                                                <button class="btn btn-sm btn-outline-primary flex-fill" @onclick="() => ViewProject(project)">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-success" @onclick="() => EditProject(project)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-warning" @onclick="() => ManageUsers(project)">
                                                    <i class="fas fa-users"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-briefcase fa-3x text-muted mb-3"></i>
                            <h5>No hay proyectos</h5>
                            <p class="text-muted">Crea tu primer proyecto para comenzar a gestionar impresoras y reportes.</p>
                            <button class="btn btn-primary" @onclick="ShowCreateProjectModal">
                                <i class="fas fa-plus me-1"></i>
                                Crear Primer Proyecto
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Quick Actions & Recent Activity -->
        <div class="col-lg-4 mb-4">
            <div class="card shadow-custom mb-4">
                <div class="card-header bg-white">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-bolt text-warning me-2"></i>
                        Acciones Rápidas
                    </h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary btn-modern" @onclick="GenerateMonthlyReport">
                            <i class="fas fa-file-pdf me-2"></i>
                            Reporte Mensual
                        </button>
                        <button class="btn btn-success btn-modern" @onclick="ShowUserManagement">
                            <i class="fas fa-user-plus me-2"></i>
                            Gestionar Usuarios
                        </button>
                        <button class="btn btn-info btn-modern" @onclick="ViewCompanySettings">
                            <i class="fas fa-cog me-2"></i>
                            Configuración
                        </button>
                        <button class="btn btn-warning btn-modern" @onclick="ViewBilling">
                            <i class="fas fa-credit-card me-2"></i>
                            Facturación
                        </button>
                    </div>
                </div>
            </div>

            <div class="card shadow-custom">
                <div class="card-header bg-white">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-history text-secondary me-2"></i>
                        Actividad Reciente
                    </h5>
                </div>
                <div class="card-body">
                    @if (recentActivity?.Any() == true)
                    {
                        <div class="activity-feed">
                            @foreach (var activity in recentActivity.Take(5))
                            {
                                <div class="activity-item">
                                    <div class="activity-icon bg-@GetActivityColor(activity.Type)">
                                        <i class="fas fa-@GetActivityIcon(activity.Type)"></i>
                                    </div>
                                    <div class="activity-content">
                                        <div class="activity-title">@activity.Title</div>
                                        <div class="activity-description">@activity.Description</div>
                                        <div class="activity-time">@activity.Timestamp.ToString("dd/MM HH:mm")</div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-3">
                            <i class="fas fa-history fa-2x text-muted mb-2"></i>
                            <p class="text-muted small">No hay actividad reciente</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Reports Overview -->
    <div class="row">
        <div class="col-lg-8 mb-4">
            <div class="card shadow-custom">
                <div class="card-header bg-white">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-chart-area text-info me-2"></i>
                        Tendencia de Reportes
                    </h5>
                </div>
                <div class="card-body">
                    <canvas id="reportsChart" height="100"></canvas>
                </div>
            </div>
        </div>

        <div class="col-lg-4 mb-4">
            <div class="card shadow-custom">
                <div class="card-header bg-white">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-users text-success me-2"></i>
                        Equipo de Trabajo
                    </h5>
                </div>
                <div class="card-body">
                    @if (teamMembers?.Any() == true)
                    {
                        <div class="team-list">
                            @foreach (var member in teamMembers.Take(6))
                            {
                                <div class="team-member">
                                    <div class="member-avatar">
                                        <i class="fas fa-user"></i>
                                    </div>
                                    <div class="member-info">
                                        <div class="member-name">@member.FullName</div>
                                        <div class="member-role">@member.Role</div>
                                    </div>
                                    <div class="member-status">
                                        <span class="status-dot @(member.IsOnline ? "online" : "offline")"></span>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="text-center mt-3">
                            <button class="btn btn-outline-success btn-sm" @onclick="ShowUserManagement">
                                Ver todos los usuarios
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-3">
                            <i class="fas fa-users fa-2x text-muted mb-2"></i>
                            <p class="text-muted small">No hay miembros del equipo</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private CompanyInfo? companyInfo;
    private CompanyStats? companyStats;
    private List<ProjectSummary>? projects;
    private List<CompanyActivity>? recentActivity;
    private List<TeamMember>? teamMembers;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && companyStats != null)
        {
            await RenderReportsChart();
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var tasks = new[]
            {
                TenantService.GetCurrentCompanyInfoAsync(),
                TenantService.GetTenantStatsAsync(),
                TenantService.GetTenantProjectsAsync(),
                ApiService.GetAsync<List<CompanyActivity>>("/api/company/activity"),
                ApiService.GetAsync<List<TeamMember>>("/api/company/team")
            };

            await Task.WhenAll(tasks);

            companyInfo = await tasks[0];
            var dashboardStats = await tasks[1];
            projects = await tasks[2];
            recentActivity = await tasks[3];
            teamMembers = await tasks[4];

            // Convert DashboardStats to CompanyStats
            companyStats = new CompanyStats
            {
                ActiveProjects = dashboardStats?.ActiveProjects ?? 0,
                TotalUsers = dashboardStats?.TotalUsers ?? 0,
                MonthlyReports = dashboardStats?.TotalReports ?? 0,
                TotalPrinters = dashboardStats?.ActivePrinters ?? 0
            };
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "Error", $"Error cargando datos: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
        await JSRuntime.InvokeVoidAsync("showToast", "Actualizado", "Datos actualizados correctamente", "success");
    }

    private async Task ShowCreateProjectModal()
    {
        await JSRuntime.InvokeVoidAsync("showToast", "Próximamente", "Modal de creación de proyecto", "info");
    }

    private async Task ViewProject(ProjectSummary project)
    {
        await JSRuntime.InvokeVoidAsync("eval", $"window.location.href = '/projects/{project.Id}'");
    }

    private async Task EditProject(ProjectSummary project)
    {
        await JSRuntime.InvokeVoidAsync("showToast", "Editar", $"Editando proyecto: {project.Name}", "info");
    }

    private async Task ManageUsers(ProjectSummary project)
    {
        await JSRuntime.InvokeVoidAsync("showToast", "Usuarios", $"Gestionando usuarios del proyecto: {project.Name}", "info");
    }

    private async Task GenerateMonthlyReport()
    {
        await JSRuntime.InvokeVoidAsync("showToast", "Generando", "Generando reporte mensual...", "info");
    }

    private async Task ShowUserManagement()
    {
        await JSRuntime.InvokeVoidAsync("eval", "window.location.href = '/company/users'");
    }

    private async Task ViewCompanySettings()
    {
        await JSRuntime.InvokeVoidAsync("eval", "window.location.href = '/company/settings'");
    }

    private async Task ViewBilling()
    {
        await JSRuntime.InvokeVoidAsync("showToast", "Próximamente", "Módulo de facturación", "info");
    }

    private async Task ShowProjectsReport()
    {
        await JSRuntime.InvokeVoidAsync("showToast", "Reporte", "Generando reporte de proyectos...", "info");
    }

    private async Task RenderReportsChart()
    {
        var chartData = new
        {
            labels = new[] { "Ene", "Feb", "Mar", "Abr", "May", "Jun" },
            datasets = new[]
            {
                new
                {
                    label = "Reportes Generados",
                    data = new[] { 12, 19, 30, 25, 22, 30 },
                    backgroundColor = "rgba(0, 123, 255, 0.1)",
                    borderColor = "rgba(0, 123, 255, 1)",
                    borderWidth = 2,
                    fill = true,
                    tension = 0.4
                }
            }
        };

        await JSRuntime.InvokeVoidAsync("renderChart", "reportsChart", "line", chartData);
    }

    private string GetActivityColor(string type)
    {
        return type switch
        {
            "Report" => "primary",
            "User" => "success",
            "Project" => "warning",
            "System" => "info",
            _ => "secondary"
        };
    }

    private string GetActivityIcon(string type)
    {
        return type switch
        {
            "Report" => "file-alt",
            "User" => "user",
            "Project" => "briefcase",
            "System" => "cog",
            _ => "info-circle"
        };
    }

    // Models
    public class CompanyStats
    {
        public int ActiveProjects { get; set; }
        public int TotalUsers { get; set; }
        public int MonthlyReports { get; set; }
        public int TotalPrinters { get; set; }
    }

    public class CompanyActivity
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Type { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }

    public class TeamMember
    {
        public Guid Id { get; set; }
        public string FullName { get; set; } = "";
        public string Role { get; set; } = "";
        public bool IsOnline { get; set; }
    }
}
