@page "/templates"
@inject ApiService ApiService
@inject TenantService TenantService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Templates de Reportes - QOPIQ</PageTitle>

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-0 text-gradient">
                        <i class="fas fa-layer-group me-2"></i>
                        Galería de Templates
                    </h1>
                    <p class="text-muted mb-0">Explora y personaliza templates de reportes</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary btn-modern" @onclick="RefreshTemplates">
                        <i class="fas fa-sync-alt @(isLoading ? "fa-spin" : "")"></i>
                        Actualizar
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando templates...</span>
            </div>
            <p class="mt-3 text-muted">Cargando galería de templates...</p>
        </div>
    }
    else
    {
        <div class="row">
            <!-- Templates Gallery -->
            <div class="col-lg-8">
                <div class="card shadow-custom mb-4">
                    <div class="card-header bg-white">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-th-large me-2"></i>
                            Templates Disponibles
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-4">
                            @foreach (var template in availableTemplates)
                            {
                                <div class="col-md-6 col-xl-4">
                                    <div class="card template-card h-100 @(selectedTemplate?.Id == template.Id ? "border-primary shadow-lg" : "border-2")" 
                                         @onclick="() => SelectTemplate(template)">
                                        <div class="template-preview">
                                            <div class="preview-header">
                                                <i class="fas fa-@template.Icon fa-2x text-@template.Color"></i>
                                                <div class="format-badges">
                                                    @foreach (var format in template.SupportedFormats)
                                                    {
                                                        <span class="badge bg-@GetFormatColor(format)">@format</span>
                                                    }
                                                </div>
                                            </div>
                                            <div class="preview-content">
                                                <img src="@GetPreviewImage(template.Id)" alt="Preview" class="preview-image" />
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <h6 class="card-title">@template.Name</h6>
                                            <p class="card-text text-muted small">@template.Description</p>
                                            <div class="template-features">
                                                @foreach (var feature in template.Features)
                                                {
                                                    <span class="badge bg-light text-dark me-1 mb-1">@feature</span>
                                                }
                                            </div>
                                            <div class="mt-2">
                                                <small class="text-muted">
                                                    <i class="fas fa-clock me-1"></i>
                                                    ~@template.EstimatedTime min
                                                </small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Template Configuration -->
            <div class="col-lg-4">
                @if (selectedTemplate != null)
                {
                    <div class="card shadow-custom sticky-top">
                        <div class="card-header bg-primary text-white">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-cog me-2"></i>
                                Configurar Template
                            </h5>
                        </div>
                        <div class="card-body">
                            <EditForm Model="@templateConfig" OnValidSubmit="@GeneratePreview">
                                <DataAnnotationsValidator />
                                
                                <div class="mb-3">
                                    <h6 class="text-primary">@selectedTemplate.Name</h6>
                                    <p class="text-muted small">@selectedTemplate.Description</p>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Proyecto *</label>
                                    <InputSelect @bind-Value="templateConfig.ProjectId" class="form-select">
                                        <option value="">Selecciona proyecto...</option>
                                        @if (projects != null)
                                        {
                                            @foreach (var project in projects)
                                            {
                                                <option value="@project.Id">@project.Name</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => templateConfig.ProjectId)" class="text-danger" />
                                </div>

                                <div class="row mb-3">
                                    <div class="col-6">
                                        <label class="form-label">Fecha Inicio</label>
                                        <InputDate @bind-Value="templateConfig.PeriodStart" class="form-control" />
                                    </div>
                                    <div class="col-6">
                                        <label class="form-label">Fecha Fin</label>
                                        <InputDate @bind-Value="templateConfig.PeriodEnd" class="form-control" />
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Formato</label>
                                    <InputSelect @bind-Value="templateConfig.Format" class="form-select">
                                        @foreach (var format in selectedTemplate.SupportedFormats)
                                        {
                                            <option value="@format">@format</option>
                                        }
                                    </InputSelect>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Contenido</label>
                                    @foreach (var feature in selectedTemplate.Features)
                                    {
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" 
                                                   checked="@GetFeatureEnabled(feature)" 
                                                   @onchange="@((e) => ToggleFeature(feature, (bool)e.Value!))" 
                                                   id="feature-@feature">
                                            <label class="form-check-label" for="feature-@feature">
                                                @feature
                                            </label>
                                        </div>
                                    }
                                </div>

                                <div class="d-grid gap-2">
                                    <button type="submit" class="btn btn-primary" disabled="@isGeneratingPreview">
                                        @if (isGeneratingPreview)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            <span>Generando Vista Previa...</span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-eye me-1"></i>
                                            <span>Vista Previa</span>
                                        }
                                    </button>
                                    
                                    <AuthorizeView Roles="SuperAdmin,CompanyAdmin,ProjectManager">
                                        <button type="button" class="btn btn-success" @onclick="GenerateReport" disabled="@isGeneratingReport">
                                            @if (isGeneratingReport)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                <span>Generando...</span>
                                            }
                                            else
                                            {
                                                <i class="fas fa-download me-1"></i>
                                                <span>Generar Reporte</span>
                                            }
                                        </button>
                                    </AuthorizeView>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card shadow-custom">
                        <div class="card-body text-center py-5">
                            <i class="fas fa-mouse-pointer fa-3x text-muted mb-3"></i>
                            <h5>Selecciona un Template</h5>
                            <p class="text-muted">Haz clic en cualquier template para ver sus opciones de configuración.</p>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Preview Modal -->
        @if (previewData != null)
        {
            <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">
                                <i class="fas fa-eye text-primary me-2"></i>
                                Vista Previa - @selectedTemplate?.Name
                            </h5>
                            <button type="button" class="btn-close" @onclick="ClosePreview"></button>
                        </div>
                        <div class="modal-body">
                            <div class="preview-container">
                                @if (templateConfig.Format == "PDF")
                                {
                                    <div class="pdf-preview">
                                        <div class="pdf-page">
                                            <div class="pdf-header">
                                                <h4>@previewData.Title</h4>
                                                <p class="text-muted">@previewData.ProjectName - @previewData.PeriodStart.ToString("dd/MM/yyyy") al @previewData.PeriodEnd.ToString("dd/MM/yyyy")</p>
                                            </div>
                                            <div class="pdf-content">
                                                @if (previewData.IncludeCharts)
                                                {
                                                    <div class="chart-placeholder mb-4">
                                                        <canvas id="previewChart" width="400" height="200"></canvas>
                                                    </div>
                                                }
                                                @if (previewData.IncludeCounters)
                                                {
                                                    <div class="data-table mb-4">
                                                        <h6>Contadores de Impresión</h6>
                                                        <table class="table table-sm">
                                                            <thead>
                                                                <tr>
                                                                    <th>Impresora</th>
                                                                    <th>Páginas B/N</th>
                                                                    <th>Páginas Color</th>
                                                                    <th>Total</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                <tr><td>HP LaserJet Pro</td><td>1,250</td><td>340</td><td>1,590</td></tr>
                                                                <tr><td>Canon Pixma</td><td>890</td><td>560</td><td>1,450</td></tr>
                                                                <tr><td>Epson EcoTank</td><td>2,100</td><td>780</td><td>2,880</td></tr>
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                }
                                                @if (previewData.IncludeCosts)
                                                {
                                                    <div class="cost-summary">
                                                        <h6>Resumen de Costos</h6>
                                                        <div class="row">
                                                            <div class="col-md-4">
                                                                <div class="metric-card">
                                                                    <div class="metric-value">$2,450</div>
                                                                    <div class="metric-label">Costo Total</div>
                                                                </div>
                                                            </div>
                                                            <div class="col-md-4">
                                                                <div class="metric-card">
                                                                    <div class="metric-value">$0.08</div>
                                                                    <div class="metric-label">Costo por Página</div>
                                                                </div>
                                                            </div>
                                                            <div class="col-md-4">
                                                                <div class="metric-card">
                                                                    <div class="metric-value">5,920</div>
                                                                    <div class="metric-label">Total Páginas</div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (templateConfig.Format == "Excel")
                                {
                                    <div class="excel-preview">
                                        <div class="excel-tabs">
                                            <span class="excel-tab active">Resumen</span>
                                            <span class="excel-tab">Contadores</span>
                                            <span class="excel-tab">Costos</span>
                                        </div>
                                        <div class="excel-sheet">
                                            <div class="excel-grid">
                                                <div class="excel-row header">
                                                    <div class="excel-cell">A</div>
                                                    <div class="excel-cell">B</div>
                                                    <div class="excel-cell">C</div>
                                                    <div class="excel-cell">D</div>
                                                </div>
                                                <div class="excel-row">
                                                    <div class="excel-cell">1</div>
                                                    <div class="excel-cell">Reporte: @previewData.Title</div>
                                                    <div class="excel-cell"></div>
                                                    <div class="excel-cell"></div>
                                                </div>
                                                <div class="excel-row">
                                                    <div class="excel-cell">2</div>
                                                    <div class="excel-cell">Proyecto: @previewData.ProjectName</div>
                                                    <div class="excel-cell"></div>
                                                    <div class="excel-cell"></div>
                                                </div>
                                                <div class="excel-row">
                                                    <div class="excel-cell">3</div>
                                                    <div class="excel-cell">Período: @previewData.PeriodStart.ToString("dd/MM/yyyy") - @previewData.PeriodEnd.ToString("dd/MM/yyyy")</div>
                                                    <div class="excel-cell"></div>
                                                    <div class="excel-cell"></div>
                                                </div>
                                                <div class="excel-row">
                                                    <div class="excel-cell">4</div>
                                                    <div class="excel-cell"></div>
                                                    <div class="excel-cell"></div>
                                                    <div class="excel-cell"></div>
                                                </div>
                                                <div class="excel-row header">
                                                    <div class="excel-cell">5</div>
                                                    <div class="excel-cell"><strong>Impresora</strong></div>
                                                    <div class="excel-cell"><strong>Páginas B/N</strong></div>
                                                    <div class="excel-cell"><strong>Páginas Color</strong></div>
                                                </div>
                                                <div class="excel-row">
                                                    <div class="excel-cell">6</div>
                                                    <div class="excel-cell">HP LaserJet Pro</div>
                                                    <div class="excel-cell">1,250</div>
                                                    <div class="excel-cell">340</div>
                                                </div>
                                                <div class="excel-row">
                                                    <div class="excel-cell">7</div>
                                                    <div class="excel-cell">Canon Pixma</div>
                                                    <div class="excel-cell">890</div>
                                                    <div class="excel-cell">560</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="ClosePreview">Cerrar</button>
                            <AuthorizeView Roles="SuperAdmin,CompanyAdmin,ProjectManager">
                                <button type="button" class="btn btn-success" @onclick="GenerateReport">
                                    <i class="fas fa-download me-1"></i>
                                    Generar Reporte
                                </button>
                            </AuthorizeView>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<ReportTemplate> availableTemplates = new();
    private List<ProjectSummary>? projects;
    private ReportTemplate? selectedTemplate;
    private TemplateConfiguration templateConfig = new();
    private ReportPreviewData? previewData;
    private bool isLoading = true;
    private bool isGeneratingPreview = false;
    private bool isGeneratingReport = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        InitializeTemplates();
        
        // Set default dates
        templateConfig.PeriodStart = DateTime.UtcNow.AddMonths(-1);
        templateConfig.PeriodEnd = DateTime.UtcNow;
        templateConfig.Format = "PDF";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (previewData != null && templateConfig.Format == "PDF" && previewData.IncludeCharts)
        {
            await JSRuntime.InvokeVoidAsync("renderPreviewChart");
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            projects = await TenantService.GetTenantProjectsAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "Error", $"Error cargando datos: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void InitializeTemplates()
    {
        availableTemplates = new List<ReportTemplate>
        {
            new ReportTemplate
            {
                Id = "monthly",
                Name = "Reporte Mensual",
                Description = "Análisis completo mensual con todas las métricas y gráficos detallados",
                Icon = "calendar-alt",
                Color = "primary",
                SupportedFormats = new[] { "PDF", "Excel", "Both" },
                Features = new[] { "Contadores", "Consumibles", "Costos", "Gráficos", "Tendencias" },
                EstimatedTime = 3
            },
            new ReportTemplate
            {
                Id = "weekly",
                Name = "Reporte Semanal",
                Description = "Resumen semanal con métricas clave y alertas importantes",
                Icon = "chart-line",
                Color = "success",
                SupportedFormats = new[] { "PDF", "Excel" },
                Features = new[] { "Contadores", "Alertas", "Gráficos" },
                EstimatedTime = 2
            },
            new ReportTemplate
            {
                Id = "executive",
                Name = "Resumen Ejecutivo",
                Description = "Vista de alto nivel para directivos con KPIs principales",
                Icon = "chart-pie",
                Color = "warning",
                SupportedFormats = new[] { "PDF" },
                Features = new[] { "KPIs", "Gráficos", "Costos", "Tendencias" },
                EstimatedTime = 2
            },
            new ReportTemplate
            {
                Id = "detailed",
                Name = "Reporte Detallado",
                Description = "Análisis exhaustivo con todos los datos disponibles",
                Icon = "list-alt",
                Color = "info",
                SupportedFormats = new[] { "Excel", "CSV" },
                Features = new[] { "Contadores", "Consumibles", "Costos", "Alertas", "Logs" },
                EstimatedTime = 5
            },
            new ReportTemplate
            {
                Id = "cost-analysis",
                Name = "Análisis de Costos",
                Description = "Enfoque específico en costos y optimización financiera",
                Icon = "dollar-sign",
                Color = "danger",
                SupportedFormats = new[] { "PDF", "Excel" },
                Features = new[] { "Costos", "Gráficos", "Proyecciones", "ROI" },
                EstimatedTime = 3
            },
            new ReportTemplate
            {
                Id = "maintenance",
                Name = "Reporte de Mantenimiento",
                Description = "Estado de impresoras y programación de mantenimiento",
                Icon = "tools",
                Color = "secondary",
                SupportedFormats = new[] { "PDF", "Excel" },
                Features = new[] { "Estado", "Alertas", "Consumibles", "Programación" },
                EstimatedTime = 2
            }
        };
    }

    private async Task RefreshTemplates()
    {
        await LoadData();
        await JSRuntime.InvokeVoidAsync("showToast", "Actualizado", "Templates actualizados", "success");
    }

    private void SelectTemplate(ReportTemplate template)
    {
        selectedTemplate = template;
        templateConfig.Format = template.SupportedFormats.First();
        
        // Reset features
        templateConfig.IncludeCounters = template.Features.Contains("Contadores");
        templateConfig.IncludeConsumables = template.Features.Contains("Consumibles");
        templateConfig.IncludeCosts = template.Features.Contains("Costos");
        templateConfig.IncludeCharts = template.Features.Contains("Gráficos");
        
        StateHasChanged();
    }

    private async Task GeneratePreview()
    {
        if (selectedTemplate == null || string.IsNullOrEmpty(templateConfig.ProjectId)) return;

        isGeneratingPreview = true;
        StateHasChanged();

        try
        {
            var project = projects?.FirstOrDefault(p => p.Id.ToString() == templateConfig.ProjectId);
            
            previewData = new ReportPreviewData
            {
                Title = $"{selectedTemplate.Name} - {project?.Name ?? "Proyecto"}",
                ProjectName = project?.Name ?? "Proyecto",
                PeriodStart = templateConfig.PeriodStart,
                PeriodEnd = templateConfig.PeriodEnd,
                IncludeCounters = templateConfig.IncludeCounters,
                IncludeConsumables = templateConfig.IncludeConsumables,
                IncludeCosts = templateConfig.IncludeCosts,
                IncludeCharts = templateConfig.IncludeCharts
            };

            await JSRuntime.InvokeVoidAsync("showToast", "Vista Previa", "Vista previa generada correctamente", "success");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "Error", $"Error generando vista previa: {ex.Message}", "error");
        }
        finally
        {
            isGeneratingPreview = false;
            StateHasChanged();
        }
    }

    private async Task GenerateReport()
    {
        if (selectedTemplate == null || string.IsNullOrEmpty(templateConfig.ProjectId)) return;

        isGeneratingReport = true;
        StateHasChanged();

        try
        {
            var generateRequest = new GenerateReportRequest
            {
                ProjectId = Guid.Parse(templateConfig.ProjectId),
                ReportType = selectedTemplate.Id switch
                {
                    "monthly" => "Monthly",
                    "weekly" => "Weekly",
                    _ => "Custom"
                },
                Title = previewData?.Title ?? selectedTemplate.Name,
                PeriodStart = templateConfig.PeriodStart,
                PeriodEnd = templateConfig.PeriodEnd,
                Format = templateConfig.Format,
                IncludeCounters = templateConfig.IncludeCounters,
                IncludeConsumables = templateConfig.IncludeConsumables,
                IncludeCosts = templateConfig.IncludeCosts,
                IncludeCharts = templateConfig.IncludeCharts,
                SendByEmail = false
            };

            var report = await ApiService.PostAsync<GenerateReportRequest, ReportSummary>("/api/report/generate", generateRequest);
            
            if (report != null)
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Reporte Generado", "Reporte generado correctamente", "success");
                ClosePreview();
                
                // Redirect to reports page
                await JSRuntime.InvokeVoidAsync("eval", "window.location.href = '/reports'");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "Error", $"Error generando reporte: {ex.Message}", "error");
        }
        finally
        {
            isGeneratingReport = false;
            StateHasChanged();
        }
    }

    private void ClosePreview()
    {
        previewData = null;
        StateHasChanged();
    }

    private string GetFormatColor(string format)
    {
        return format switch
        {
            "PDF" => "danger",
            "Excel" => "success",
            "CSV" => "info",
            "Both" => "primary",
            _ => "secondary"
        };
    }

    private string GetPreviewImage(string templateId)
    {
        return $"/images/templates/{templateId}-preview.png";
    }

    private bool GetFeatureEnabled(string feature)
    {
        return feature switch
        {
            "Contadores" => templateConfig.IncludeCounters,
            "Consumibles" => templateConfig.IncludeConsumables,
            "Costos" => templateConfig.IncludeCosts,
            "Gráficos" => templateConfig.IncludeCharts,
            _ => true
        };
    }

    private void ToggleFeature(string feature, bool enabled)
    {
        switch (feature)
        {
            case "Contadores":
                templateConfig.IncludeCounters = enabled;
                break;
            case "Consumibles":
                templateConfig.IncludeConsumables = enabled;
                break;
            case "Costos":
                templateConfig.IncludeCosts = enabled;
                break;
            case "Gráficos":
                templateConfig.IncludeCharts = enabled;
                break;
        }
        StateHasChanged();
    }

    // Models
    public class ReportTemplate
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public string Icon { get; set; } = "";
        public string Color { get; set; } = "";
        public string[] SupportedFormats { get; set; } = Array.Empty<string>();
        public string[] Features { get; set; } = Array.Empty<string>();
        public int EstimatedTime { get; set; }
    }

    public class TemplateConfiguration
    {
        public string ProjectId { get; set; } = "";
        public DateTime PeriodStart { get; set; }
        public DateTime PeriodEnd { get; set; }
        public string Format { get; set; } = "PDF";
        public bool IncludeCounters { get; set; } = true;
        public bool IncludeConsumables { get; set; } = true;
        public bool IncludeCosts { get; set; } = true;
        public bool IncludeCharts { get; set; } = true;
    }

    public class ReportPreviewData
    {
        public string Title { get; set; } = "";
        public string ProjectName { get; set; } = "";
        public DateTime PeriodStart { get; set; }
        public DateTime PeriodEnd { get; set; }
        public bool IncludeCounters { get; set; }
        public bool IncludeConsumables { get; set; }
        public bool IncludeCosts { get; set; }
        public bool IncludeCharts { get; set; }
    }
}
