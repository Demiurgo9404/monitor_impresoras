@inject IJSRuntime JSRuntime

@if (ScheduledReports?.Any() == true)
{
    <div class="table-responsive">
        <table class="table table-hover mb-0">
            <thead>
                <tr>
                    <th>Reporte</th>
                    <th>Proyecto</th>
                    <th>Programación</th>
                    <th>Próxima Ejecución</th>
                    <th>Última Ejecución</th>
                    <th>Estado</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var schedule in ScheduledReports)
                {
                    <tr class="@(schedule.IsActive ? "" : "table-secondary")">
                        <td>
                            <div class="fw-bold">@schedule.Title</div>
                            <small class="text-muted">
                                <i class="fas fa-file-@(GetFormatIcon(schedule.Format)) me-1"></i>
                                @schedule.ReportType - @schedule.Format
                            </small>
                        </td>
                        <td>
                            <span class="badge bg-light text-dark">@schedule.ProjectName</span>
                        </td>
                        <td>
                            <div class="small">
                                <i class="fas fa-clock me-1"></i>
                                @GetCronDescription(schedule.CronExpression)
                            </div>
                            <code class="small text-muted">@schedule.CronExpression</code>
                        </td>
                        <td>
                            @if (schedule.NextExecution.HasValue)
                            {
                                <div class="@(IsUpcoming(schedule.NextExecution.Value) ? "text-warning fw-bold" : "")">
                                    @schedule.NextExecution.Value.ToString("dd/MM/yyyy")
                                </div>
                                <small class="text-muted">@schedule.NextExecution.Value.ToString("HH:mm")</small>
                            }
                            else
                            {
                                <span class="text-muted">-</span>
                            }
                        </td>
                        <td>
                            @if (schedule.LastExecution.HasValue)
                            {
                                <div>@schedule.LastExecution.Value.ToString("dd/MM/yyyy")</div>
                                <small class="text-muted">@schedule.LastExecution.Value.ToString("HH:mm")</small>
                            }
                            else
                            {
                                <span class="text-muted">Nunca</span>
                            }
                        </td>
                        <td>
                            <div class="d-flex flex-column gap-1">
                                <span class="status-badge status-@(schedule.IsActive ? "active" : "inactive")">
                                    @(schedule.IsActive ? "Activo" : "Pausado")
                                </span>
                                @if (!string.IsNullOrEmpty(schedule.LastExecutionStatus))
                                {
                                    <span class="status-badge status-@schedule.LastExecutionStatus.ToLower()">
                                        @GetStatusText(schedule.LastExecutionStatus)
                                    </span>
                                }
                            </div>
                        </td>
                        <td>
                            <div class="d-flex gap-1">
                                <AuthorizeView Roles="SuperAdmin,CompanyAdmin,ProjectManager">
                                    <button class="btn btn-sm btn-outline-primary" 
                                            @onclick="() => OnEdit.InvokeAsync(schedule)" 
                                            title="Editar">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    
                                    <button class="btn btn-sm @(schedule.IsActive ? "btn-outline-warning" : "btn-outline-success")" 
                                            @onclick="() => OnToggle.InvokeAsync(schedule)" 
                                            title="@(schedule.IsActive ? "Pausar" : "Activar")">
                                        <i class="fas fa-@(schedule.IsActive ? "pause" : "play")"></i>
                                    </button>
                                    
                                    <button class="btn btn-sm btn-outline-info" 
                                            @onclick="() => OnExecute.InvokeAsync(schedule)" 
                                            title="Ejecutar ahora">
                                        <i class="fas fa-play-circle"></i>
                                    </button>
                                    
                                    <button class="btn btn-sm btn-outline-danger" 
                                            @onclick="() => OnDelete.InvokeAsync(schedule)" 
                                            title="Eliminar">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </AuthorizeView>
                                
                                <AuthorizeView Roles="Viewer">
                                    <button class="btn btn-sm btn-outline-secondary" disabled title="Solo lectura">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </AuthorizeView>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="text-center py-5">
        <i class="fas fa-calendar-times fa-3x text-muted mb-3"></i>
        <h5>No hay reportes programados</h5>
        <p class="text-muted">No se encontraron reportes programados para este tenant.</p>
        <AuthorizeView Roles="SuperAdmin,CompanyAdmin,ProjectManager">
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                <i class="fas fa-plus me-1"></i>
                Programar primer reporte
            </button>
        </AuthorizeView>
    </div>
}

@code {
    [Parameter] public List<ScheduledReportSummary>? ScheduledReports { get; set; }
    [Parameter] public EventCallback<ScheduledReportSummary> OnEdit { get; set; }
    [Parameter] public EventCallback<ScheduledReportSummary> OnToggle { get; set; }
    [Parameter] public EventCallback<ScheduledReportSummary> OnDelete { get; set; }
    [Parameter] public EventCallback<ScheduledReportSummary> OnExecute { get; set; }

    private async Task ShowCreateModal()
    {
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('scheduleModal')).show()");
    }

    private string GetFormatIcon(string format)
    {
        return format switch
        {
            "PDF" => "pdf",
            "Excel" => "excel",
            "Both" => "archive",
            _ => "file"
        };
    }

    private string GetCronDescription(string cronExpression)
    {
        return cronExpression switch
        {
            "0 0 1 * *" => "Mensual (día 1)",
            "0 0 * * 1" => "Semanal (lunes)",
            "0 0 * * *" => "Diario (00:00)",
            "0 9 * * 1-5" => "Días laborables (09:00)",
            _ => "Personalizado"
        };
    }

    private string GetStatusText(string status)
    {
        return status switch
        {
            "Success" => "Éxito",
            "Failed" => "Fallido",
            "Running" => "Ejecutando",
            _ => status
        };
    }

    private bool IsUpcoming(DateTime nextExecution)
    {
        var now = DateTime.UtcNow;
        var timeDiff = nextExecution - now;
        return timeDiff.TotalHours <= 24 && timeDiff.TotalHours > 0;
    }
}
