using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using Lextm.SharpSnmpLib;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using MonitorImpresoras.Application.DTOs;
using MonitorImpresoras.Application.Interfaces;
using MonitorImpresoras.Application.Interfaces.Services;
using MonitorImpresoras.Domain.Entities;
using MonitorImpresoras.Infrastructure.Data;

namespace MonitorImpresoras.Infrastructure.Services
{
    public class PrinterMonitoringService : BasePrinterService, IPrinterMonitoringService, IDisposable
    {
        private readonly ApplicationDbContext _context;
        private readonly IWindowsPrinterService _windowsPrinterService;
        private readonly IMapper _mapper;
        private bool _disposed = false;

        // OIDs comunes para impresoras
        private static class PrinterOids
        {
            // Estado de la impresora
            public const string DeviceStatus = ".1.3.6.1.2.1.25.3.2.1.5.1";
            public const string DeviceErrors = ".1.3.6.1.2.1.25.3.5.1.2.1";
            
            // Contadores de páginas
            public const string TotalPrints = ".1.3.6.1.2.1.43.10.2.1.4.1.1"; // Total de impresiones
            public const string BlackPrints = ".1.3.6.1.2.1.43.12.1.1.4.1.1"; // Páginas en negro
            public const string ColorPrints = ".1.3.6.1.2.1.43.12.1.1.8.1.1"; // Páginas a color
            
            // Niveles de tóner
            public const string BlackTonerLevel = ".1.3.6.1.2.1.43.11.1.1.9.1.1";
            public const string CyanTonerLevel = ".1.3.6.1.2.1.43.11.1.1.9.1.2";
            public const string MagentaTonerLevel = ".1.3.6.1.2.1.43.11.1.1.9.1.3";
            public const string YellowTonerLevel = ".1.3.6.1.2.1.43.11.1.1.9.1.4";
            
            // Niveles de tinta
            public const string BlackInkLevel = ".1.3.6.1.2.1.43.11.1.1.8.1.1";
            public const string CyanInkLevel = ".1.3.6.1.2.1.43.11.1.1.8.1.2";
            public const string MagentaInkLevel = ".1.3.6.1.2.1.43.11.1.1.8.1.3";
            public const string YellowInkLevel = ".1.3.6.1.2.1.43.11.1.1.8.1.4";
            
            // Alertas
            public const string PaperJam = ".1.3.6.1.2.1.43.18.1.1.7";
            public const string LowToner = ".1.3.6.1.2.1.43.18.1.1.8";
            public const string NoToner = ".1.3.6.1.2.1.43.18.1.1.9";
            public const string DoorOpen = ".1.3.6.1.2.1.43.18.1.1.10";
        }

        public PrinterMonitoringService(
            ApplicationDbContext context,
            IWindowsPrinterService windowsPrinterService,
            IMapper mapper,
            ILogger<PrinterMonitoringService> logger) : base(logger)
        {
            _context = context ?? throw new ArgumentNullException(nameof(context));
            _windowsPrinterService = windowsPrinterService ?? throw new ArgumentNullException(nameof(windowsPrinterService));
            _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
        }

        public async Task<IEnumerable<PrinterDto>> GetAllPrintersAsync()
        {
            var printers = await _context.Printers
                .AsNoTracking()
                .ToListAsync();

            // Actualizar estado de cada impresora
            foreach (var printer in printers)
            {
                await CheckPrinterStatusAsync(printer.Id);
            }

            // Mapear a DTOs
            return _mapper.Map<IEnumerable<PrinterDto>>(printers);
        }

        public async Task<PrinterDto> GetPrinterByIdAsync(Guid id) 
        {
            var printer = await _context.Printers
                .FirstOrDefaultAsync(p => p.Id == id);

            if (printer != null)
            {
                await CheckPrinterStatusAsync(printer.Id);
                await _context.Entry(printer).ReloadAsync();
                return _mapper.Map<PrinterDto>(printer);
            }

            return null;
        }

        public async Task<PrinterDto> AddPrinterAsync(PrinterDto printerDto)
        {
            if (printerDto == null) throw new ArgumentNullException(nameof(printerDto));

            var printer = _mapper.Map<Printer>(printerDto);
            await _context.Printers.AddAsync(printer);
            await _context.SaveChangesAsync();
            
            // Verificar el estado después de agregar
            await CheckPrinterStatusAsync(printer.Id);
            
            // Recargar la entidad para obtener los valores generados por la base de datos
            await _context.Entry(printer).ReloadAsync();
            return _mapper.Map<PrinterDto>(printer);
        }

        public async Task UpdatePrinterAsync(PrinterDto printerDto)
        {
            if (printerDto == null) throw new ArgumentNullException(nameof(printerDto));

            var existingPrinter = await _context.Printers.FindAsync(printerDto.Id);
            if (existingPrinter == null)
            {
                throw new KeyNotFoundException($"No se encontró una impresora con el ID {printerDto.Id}");
            }

            // Mapear las propiedades del DTO a la entidad existente
            _mapper.Map(printerDto, existingPrinter);
            
            _context.Printers.Update(existingPrinter);
            await _context.SaveChangesAsync();
            
            // Actualizar el estado después de la actualización
            await CheckPrinterStatusAsync(existingPrinter.Id);
        }

        public async Task DeletePrinterAsync(Guid id)
        {
            var printer = await _context.Printers.FindAsync(id);
            if (printer != null)
            {
                _context.Printers.Remove(printer);
                await _context.SaveChangesAsync();
            }
        }

        public async Task CheckAllPrintersStatusAsync()
        {
            var printers = await _context.Printers.ToListAsync();
            
            foreach (var printer in printers)
            {
                try
                {
                    if (printer.IsLocalPrinter)
                    {
                        await UpdateLocalPrinterStatus(printer);
                    }
                    else
                    {
                        await UpdateNetworkPrinterStatus(printer);
                    }
                    printer.LastChecked = DateTime.UtcNow;
                    await _context.SaveChangesAsync();
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error al verificar el estado de la impresora {PrinterId}", printer.Id);
                    printer.LastError = ex.Message;
                    await _context.SaveChangesAsync();
                }
            }
        }

        public async Task CheckPrinterStatusAsync(Guid printerId)
        {
            var printer = await _context.Printers.FindAsync(printerId);
            if (printer == null) return;

            try
            {
                if (printer.IsLocalPrinter)
                {
                    await UpdateLocalPrinterStatus(printer);
                }
                else
                {
                    await UpdateNetworkPrinterStatus(printer);
                }
                
                printer.LastChecked = DateTime.UtcNow;
                await _context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al verificar el estado de la impresora {PrinterId}", printerId);
                printer.LastError = ex.Message;
                await _context.SaveChangesAsync();
            }
        }

        private async Task UpdateNetworkPrinterStatus(Printer printer)
        {
            try
            {
                // Obtener múltiples valores SNMP en una sola solicitud
                var oids = new[]
                {
                    PrinterOids.DeviceStatus,
                    PrinterOids.TotalPrints,
                    PrinterOids.BlackPrints,
                    PrinterOids.ColorPrints,
                    PrinterOids.BlackTonerLevel,
                    PrinterOids.CyanTonerLevel,
                    PrinterOids.MagentaTonerLevel,
                    PrinterOids.YellowTonerLevel,
                    PrinterOids.BlackInkLevel,
                    PrinterOids.CyanInkLevel,
                    PrinterOids.MagentaInkLevel,
                    PrinterOids.YellowInkLevel,
                    PrinterOids.PaperJam,
                    PrinterOids.LowToner,
                    PrinterOids.NoToner,
                    PrinterOids.DoorOpen
                };

                var results = await GetMultipleSnmpValuesAsync(
                    printer.IpAddress,
                    oids,
                    printer.CommunityString,
                    printer.SnmpPort ?? 161);

                // Procesar resultados
                if (results.TryGetValue(PrinterOids.DeviceStatus, out var statusVar))
                {
                    printer.Status = statusVar.Data.ToString() == "3" ? "Online" : "Error";
                }

                if (results.TryGetValue(PrinterOids.TotalPrints, out var totalPrintsVar))
                {
                    if (totalPrintsVar.Data is Integer32 totalPrints)
                    {
                        printer.TotalPagesPrinted = totalPrints.ToInt32();
                        
                        // Si es la primera vez que se verifica, establecer el contador inicial
                        if (!printer.PageCount.HasValue || printer.PageCount == 0)
                        {
                            printer.PageCount = 0;
                        }
                    }
                }

                // Actualizar niveles de tóner
                UpdateTonerLevel(printer, results, PrinterOids.BlackTonerLevel, v => printer.BlackTonerLevel = v);
                UpdateTonerLevel(printer, results, PrinterOids.CyanTonerLevel, v => printer.CyanTonerLevel = v);
                UpdateTonerLevel(printer, results, PrinterOids.MagentaTonerLevel, v => printer.MagentaTonerLevel = v);
                UpdateTonerLevel(printer, results, PrinterOids.YellowTonerLevel, v => printer.YellowTonerLevel = v);

                // Actualizar niveles de tinta
                UpdateInkLevel(printer, results, PrinterOids.BlackInkLevel, v => printer.BlackInkLevel = v);
                UpdateInkLevel(printer, results, PrinterOids.CyanInkLevel, v => printer.CyanInkLevel = v);
                UpdateInkLevel(printer, results, PrinterOids.MagentaInkLevel, v => printer.MagentaInkLevel = v);
                UpdateInkLevel(printer, results, PrinterOids.YellowInkLevel, v => printer.YellowInkLevel = v);

                // Verificar alertas
                CheckAlerts(printer, results);

                UpdatePrinterStatus(printer, true, printer.Status);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al actualizar el estado de la impresora de red {PrinterName}", printer.Name);
                UpdatePrinterStatus(printer, false, "Error de comunicación");
                printer.LastError = $"Error al actualizar estado: {ex.Message}";
            }
        }

        private async Task UpdateLocalPrinterStatus(Printer printer)
        {
            try
            {
                _logger.LogInformation("Actualizando estado de la impresora local: {PrinterModel}", printer.Model);
                
                // Obtener el estado actual de la impresora
                var status = await _windowsPrinterService.GetPrinterStatusAsync(printer.Model);
                
                // Extraer valores del estado
                bool isOnline = status.TryGetValue("IsOnline", out var onlineObj) && onlineObj is bool online && online;
                bool isReady = status.TryGetValue("IsReady", out var readyObj) && readyObj is bool ready && ready;
                string statusMessage = status.TryGetValue("StatusMessage", out var messageObj) 
                    ? messageObj?.ToString() ?? "Estado desconocido" 
                    : "Estado no disponible";
                
                int pagesPrinted = status.TryGetValue("PagesPrinted", out var pagesObj) && pagesObj is int pages 
                    ? pages 
                    : 0;
                    
                int jobCount = status.TryGetValue("JobCount", out var jobsObj) && jobsObj is int jobs
                    ? jobs
                    : 0;
                
                // Actualizar el estado de la impresora
                printer.Status = isOnline ? (isReady ? "En línea" : "Ocupada") : "Desconectada";
                printer.IsOnline = isOnline;
                printer.LastError = isOnline ? string.Empty : "Impresora no disponible";
                
                // Actualizar contadores
                await UpdatePrinterCounters(printer, pagesPrinted);
                
                // Actualizar niveles de tóner (simulados para impresoras locales)
                if (isOnline)
                {
                    UpdateTonerLevels(printer);
                }
                else
                {
                    // Si la impresora está desconectada, establecer niveles en 0
                    ResetTonerLevels(printer);
                }
                
                // Actualizar alertas
                UpdateAlerts(printer, jobCount > 0);
                
                // Registrar el estado actual
                _logger.LogInformation(
                    "Estado actualizado - Impresora: {PrinterModel}, Estado: {Status}, " +
                    "Páginas: {PagesPrinted}, Trabajos: {JobCount}",
                    printer.Model, printer.Status, pagesPrinted, jobCount);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al actualizar el estado de la impresora local {PrinterModel}", printer.Model);
                
                // Actualizar el estado de error
                printer.Status = "Error";
                printer.IsOnline = false;
                printer.LastError = $"Error al actualizar estado: {ex.Message}";
                printer.NeedsUserAttention = true;
            }
            finally
            {
                // Siempre actualizar la última verificación
                printer.LastChecked = DateTime.UtcNow;
                
                try
                {
                    // Guardar los cambios en la base de datos
                    await _context.SaveChangesAsync();
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error al guardar el estado de la impresora {PrinterModel}", printer.Model);
                }
            }
        }
        
        private async Task UpdatePrinterCounters(Printer printer, int currentPageCount)
        {
            if (currentPageCount > 0)
            {
                // Si es la primera vez que se verifica, establecer el contador inicial
                if (!printer.PageCount.HasValue || printer.PageCount == 0)
                {
                    printer.PageCount = currentPageCount;
                }
                
                // Solo actualizar el contador total si es mayor que el actual
                if (!printer.TotalPagesPrinted.HasValue || currentPageCount > printer.TotalPagesPrinted)
                {
                    // Calcular la diferencia de páginas impresas desde la última verificación
                    int pagesSinceLastCheck = currentPageCount - (printer.TotalPagesPrinted ?? 0);
                    
                    // Actualizar contadores de páginas
                    printer.TotalPagesPrinted = currentPageCount;
                    
                    // Actualizar contadores de impresiones en blanco y negro/color
                    // Para impresoras locales, asumimos un 70% en blanco y negro y 30% a color
                    if (pagesSinceLastCheck > 0)
                    {
                        int blackAndWhitePages = (int)(pagesSinceLastCheck * 0.7);
                        int colorPages = pagesSinceLastCheck - blackAndWhitePages;
                        
                        printer.TotalPrintsBlack = (printer.TotalPrintsBlack ?? 0) + blackAndWhitePages;
                        printer.TotalPrintsColor = (printer.TotalPrintsColor ?? 0) + colorPages;
                    }
                }
            }
        }
        
        private void UpdateTonerLevels(Printer printer)
        {
            // Solo actualizar si no hay valores o si están por debajo de un umbral mínimo
            if (!printer.BlackTonerLevel.HasValue || printer.BlackTonerLevel < 5)
                printer.BlackTonerLevel = 80;
            
            if (!printer.CyanTonerLevel.HasValue || printer.CyanTonerLevel < 5)
                printer.CyanTonerLevel = 75;
                
            if (!printer.MagentaTonerLevel.HasValue || printer.MagentaTonerLevel < 5)
                printer.MagentaTonerLevel = 70;
                
            if (!printer.YellowTonerLevel.HasValue || printer.YellowTonerLevel < 5)
                printer.YellowTonerLevel = 65;
        }
        
        private void ResetTonerLevels(Printer printer)
        {
            // Establecer niveles de tóner a 0 cuando la impresora está desconectada
            printer.BlackTonerLevel = 0;
            printer.CyanTonerLevel = 0;
            printer.MagentaTonerLevel = 0;
            printer.YellowTonerLevel = 0;
        }
        
        private void UpdateAlerts(Printer printer, bool hasJobs)
        {
            // Verificar niveles bajos de tóner
            printer.LowTonerWarning = (printer.BlackTonerLevel < 10) || 
                                     (printer.CyanTonerLevel < 10) || 
                                     (printer.MagentaTonerLevel < 10) || 
                                     (printer.YellowTonerLevel < 10);
            
            // Verificar si la impresora necesita atención del usuario
            printer.NeedsUserAttention = printer.LowTonerWarning || 
                                        printer.PaperJam || 
                                        !string.IsNullOrEmpty(printer.LastError) ||
                                        hasJobs;
        }
        }

        private void UpdateTonerLevel(Printer printer, Dictionary<string, Variable> results, string oid, Action<int> setter)
        {
            if (results.TryGetValue(oid, out var levelVar) && levelVar.Data is Integer32 level)
            {
                var value = level.ToInt32();
                setter(value);
                
                // Actualizar alertas de bajo nivel de tóner
                if (value < 10)
                {
                    printer.LowTonerWarning = true;
                    printer.NeedsUserAttention = true;
                }
            }
        }

        private void UpdateInkLevel(Printer printer, Dictionary<string, Variable> results, string oid, Action<int> setter)
        {
            if (results.TryGetValue(oid, out var levelVar) && levelVar.Data is Integer32 level)
            {
                var value = level.ToInt32();
                setter(value);
                
                // Actualizar alertas de bajo nivel de tinta
                if (value < 15)
                {
                    printer.LowInkWarning = true;
                    printer.NeedsUserAttention = true;
                }
            }
        }

        private void CheckAlerts(Printer printer, Dictionary<string, Variable> results)
        {
            // Verificar atascos de papel
            if (results.TryGetValue(PrinterOids.PaperJam, out var paperJamVar) && 
                paperJamVar.Data is Integer32 paperJam && paperJam.ToInt32() == 1)
            {
                printer.PaperJam = true;
                printer.NeedsUserAttention = true;
                printer.Status = "Atasco de papel";
            }

            // Verificar tóner bajo
            if (results.TryGetValue(PrinterOids.LowToner, out var lowTonerVar) && 
                lowTonerVar.Data is Integer32 lowToner && lowToner.ToInt32() == 1)
            {
                printer.LowTonerWarning = true;
                printer.NeedsUserAttention = true;
            }

            // Verificar sin tóner
            if (results.TryGetValue(PrinterOids.NoToner, out var noTonerVar) && 
                noTonerVar.Data is Integer32 noToner && noToner.ToInt32() == 1)
            {
                printer.LowTonerWarning = true;
                printer.NeedsUserAttention = true;
                printer.Status = "Sin tóner";
            }

            // Verificar tapa abierta
            if (results.TryGetValue(PrinterOids.DoorOpen, out var doorOpenVar) && 
                doorOpenVar.Data is Integer32 doorOpen && doorOpen.ToInt32() == 1)
            {
                printer.NeedsUserAttention = true;
                printer.Status = "Tapa abierta";
            }
        }
        #endregion

        #region IDisposable Implementation
        public void Dispose()
        {
            // No cambies este código. Pone el código de limpieza en el método 'Dispose(bool disposing)'.
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!_disposed)
            {
                if (disposing)
                {
                    // Liberar recursos administrados
                    _context?.Dispose();
                }

                // Liberar recursos no administrados
                _disposed = true;
            }
        }
        #endregion
    }
}
