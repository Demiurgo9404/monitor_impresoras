using MonitorImpresoras.Domain.Common;
using MonitorImpresoras.Domain.Enums;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace MonitorImpresoras.Domain.Entities
{
    /// <summary>
    /// Entidad para alertas generadas por el sistema
    /// </summary>
    public class Alert : BaseEntity
    {
        [Required]
        public Guid TenantId { get; set; }

        [Required]
        public Guid EntityId { get; set; }

        public int? PrinterId { get; set; }

        [Required]
        [MaxLength(1000)]
        public string Description { get; set; } = string.Empty;

        [Required]
        public AlertType Type { get; set; }

        [Required]
        public AlertSeverity Severity { get; set; }

        [Required]
        public AlertStatus Status { get; set; } = AlertStatus.Open;

        [MaxLength(200)]
        public string? Title { get; set; }

        [MaxLength(100)]
        public string? Source { get; set; }

        public bool IsAutoGenerated { get; set; } = false;

        [MaxLength(500)]
        public string? ResolutionNotes { get; set; }

        public DateTime? DetectedAt { get; set; }

        public DateTime? ResolvedAt { get; set; }

        public DateTime? UpdatedAt { get; set; }

        // Navigation properties
        public virtual Tenant? Tenant { get; set; }
    }

    /// <summary>
    /// Entidad para reglas de alerta inteligentes
    /// </summary>
    public class AlertRule : BaseEntity
    {
        [Required]
        public Guid TenantId { get; set; }

        [Required]
        [MaxLength(200)]
        public string Name { get; set; } = string.Empty;

        [MaxLength(500)]
        public string Description { get; set; } = string.Empty;

        [Required]
        public ReportType ReportType { get; set; }

        [Required]
        public AlertRuleType RuleType { get; set; }

        [Required]
        public AlertType AlertType { get; set; }

        [Required]
        public AlertSeverity Severity { get; set; }

        [Required]
        public bool IsActive { get; set; } = true;

        // Configuración de la regla
        [MaxLength(100)]
        public string FieldName { get; set; } = string.Empty;

        [Required]
        public ComparisonOperator Operator { get; set; }

        public double ThresholdValue { get; set; }

        [MaxLength(100)]
        public string ThresholdField { get; set; } = string.Empty;

        public double SensitivityLevel { get; set; } = 2.0; // Para reglas de anomalía

        public int CooldownHours { get; set; } = 24; // Horas para no repetir alertas similares

        // Configuración de notificaciones
        public bool SendEmail { get; set; } = true;
        public bool SendWebhook { get; set; } = false;
        public bool SendSlack { get; set; } = false;
        public bool SendTeams { get; set; } = false;

        // Estadísticas
        public int TimesTriggered { get; set; } = 0;
        public DateTime? LastTriggered { get; set; }

        // Navigation properties
        public virtual Tenant Tenant { get; set; } = null!;
        public virtual ICollection<Alert> GeneratedAlerts { get; set; } = new List<Alert>();
    }
}
