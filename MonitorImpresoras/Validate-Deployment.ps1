#requires -Version 5.1
<#
.SYNOPSIS
    Script de validaci√≥n post-despliegue para MonitorImpresoras

.DESCRIPTION
    Este script realiza todas las validaciones necesarias despu√©s de un despliegue
    para asegurar que la aplicaci√≥n funciona correctamente.

.PARAMETER BaseUrl
    URL base de la aplicaci√≥n (ej: http://localhost o https://api.monitorimpresoras.com)

.PARAMETER TimeoutSeconds
    Tiempo m√°ximo de espera para cada validaci√≥n (por defecto: 30 segundos)

.PARAMETER MaxRetries
    N√∫mero m√°ximo de reintentos para cada validaci√≥n (por defecto: 5)

.PARAMETER SkipDatabaseCheck
    Omitir validaci√≥n de base de datos

.EXAMPLE
    .\Validate-Deployment.ps1 -BaseUrl "http://localhost"

.EXAMPLE
    .\Validate-Deployment.ps1 -BaseUrl "https://api.monitorimpresoras.com" -TimeoutSeconds 60
#>

[CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]$BaseUrl,

    [int]$TimeoutSeconds = 30,
    [int]$MaxRetries = 5,
    [switch]$SkipDatabaseCheck
)

# Configuraci√≥n
$LogFile = Join-Path $env:TEMP "MonitorImpresoras-Validation-$(Get-Date -Format 'yyyyMMdd-HHmmss').log"
$ValidationResults = @()

Start-Transcript -Path $LogFile -Append

Write-Host "üîç Iniciando validaci√≥n post-despliegue de MonitorImpresoras..." -ForegroundColor Green
Write-Host "üìç URL Base: $BaseUrl" -ForegroundColor Cyan
Write-Host "‚è±Ô∏è Timeout: $TimeoutSeconds segundos" -ForegroundColor Cyan
Write-Host "üîÑ Reintentos: $MaxRetries" -ForegroundColor Cyan

# Funci√≥n auxiliar para ejecutar validaciones con reintentos
function Invoke-ValidationWithRetry {
    param(
        [string]$Name,
        [scriptblock]$ScriptBlock,
        [int]$RetryCount = $MaxRetries,
        [int]$DelaySeconds = 5
    )

    $attempt = 1
    $success = $false
    $errorMessage = ""

    Write-Host "üîç Validando: $Name..." -ForegroundColor Yellow

    while ($attempt -le $RetryCount -and -not $success) {
        try {
            $result = & $ScriptBlock

            if ($result -eq $true -or $result.StatusCode -eq 200 -or $result -ne $null) {
                $success = $true
                Write-Host "‚úÖ $Name - PASSED (intento $attempt)" -ForegroundColor Green

                $ValidationResults += @{
                    Name = $Name
                    Status = "PASSED"
                    Attempts = $attempt
                    Details = "Validaci√≥n exitosa"
                }
            } else {
                throw "Validaci√≥n fallida: resultado inesperado"
            }
        }
        catch {
            $errorMessage = $_.Exception.Message
            Write-Host "‚ùå $Name - FAILED (intento $attempt): $errorMessage" -ForegroundColor Red

            if ($attempt -lt $RetryCount) {
                Write-Host "‚è≥ Reintentando en $DelaySeconds segundos..." -ForegroundColor Yellow
                Start-Sleep -Seconds $DelaySeconds
            }
        }

        $attempt++
    }

    if (-not $success) {
        Write-Host "üí• $Name - FINALMENTE FALLIDO despu√©s de $RetryCount intentos" -ForegroundColor Red

        $ValidationResults += @{
            Name = $Name
            Status = "FAILED"
            Attempts = $RetryCount
            Details = $errorMessage
        }

        return $false
    }

    return $true
}

try {
    # Validaci√≥n 1: Conectividad b√°sica
    $success = Invoke-ValidationWithRetry -Name "Conectividad B√°sica" -ScriptBlock {
        $response = Invoke-WebRequest -Uri $BaseUrl -TimeoutSec $TimeoutSeconds -UseBasicParsing -ErrorAction Stop
        return $response.StatusCode -eq 200
    }

    if (-not $success) {
        throw "La aplicaci√≥n no responde en la URL base: $BaseUrl"
    }

    # Validaci√≥n 2: Health Check b√°sico
    $success = Invoke-ValidationWithRetry -Name "Health Check B√°sico" -ScriptBlock {
        $response = Invoke-WebRequest -Uri "$BaseUrl/api/v1/health" -TimeoutSec $TimeoutSeconds -UseBasicParsing -ErrorAction Stop
        if ($response.StatusCode -ne 200) { return $false }

        $health = $response.Content | ConvertFrom-Json
        return $health.status -eq "Healthy"
    }

    if (-not $success) {
        Write-Warning "‚ö†Ô∏è Health check b√°sico fallido. La aplicaci√≥n puede tener problemas."
    }

    # Validaci√≥n 3: Health Check extendido
    $success = Invoke-ValidationWithRetry -Name "Health Check Extendido" -ScriptBlock {
        $response = Invoke-WebRequest -Uri "$BaseUrl/api/v1/health/extended" -TimeoutSec $TimeoutSeconds -UseBasicParsing -ErrorAction Stop
        if ($response.StatusCode -ne 200) { return $false }

        $health = $response.Content | ConvertFrom-Json
        return $health.status -eq "Healthy" -and $health.database -ne $null
    }

    if (-not $success) {
        Write-Warning "‚ö†Ô∏è Health check extendido fallido. Algunos componentes pueden no estar funcionando."
    }

    # Validaci√≥n 4: M√©tricas de Prometheus
    $success = Invoke-ValidationWithRetry -Name "M√©tricas Prometheus" -ScriptBlock {
        $response = Invoke-WebRequest -Uri "$BaseUrl/metrics" -TimeoutSec $TimeoutSeconds -UseBasicParsing -ErrorAction Stop
        if ($response.StatusCode -ne 200) { return $false }

        $content = $response.Content
        return $content -like "*# Custom application metrics*" -and $content -like "*api_requests_total*"
    }

    if (-not $success) {
        Write-Warning "‚ö†Ô∏è M√©tricas de Prometheus no disponibles. El monitoreo puede no funcionar."
    }

    # Validaci√≥n 5: API de reportes disponible
    $success = Invoke-ValidationWithRetry -Name "API de Reportes" -ScriptBlock {
        $response = Invoke-WebRequest -Uri "$BaseUrl/api/v1/reports/available" -TimeoutSec $TimeoutSeconds -UseBasicParsing -ErrorAction Stop
        if ($response.StatusCode -ne 200) { return $false }

        $reports = $response.Content | ConvertFrom-Json
        return $reports -is [System.Array] -and $reports.Count -gt 0
    }

    if (-not $success) {
        Write-Warning "‚ö†Ô∏è API de reportes no disponible. La funcionalidad principal puede estar afectada."
    }

    # Validaci√≥n 6: Swagger UI
    $success = Invoke-ValidationWithRetry -Name "Swagger UI" -ScriptBlock {
        $response = Invoke-WebRequest -Uri "$BaseUrl/swagger/index.html" -TimeoutSec $TimeoutSeconds -UseBasicParsing -ErrorAction Stop
        if ($response.StatusCode -ne 200) { return $false }

        $content = $response.Content
        return $content -like "*swagger*" -and $content -like "*Monitor Impresoras*"
    }

    if (-not $success) {
        Write-Warning "‚ö†Ô∏è Swagger UI no disponible. La documentaci√≥n puede no estar accesible."
    }

    # Validaci√≥n 7: Verificaci√≥n de base de datos (si no se omite)
    if (-not $SkipDatabaseCheck) {
        $success = Invoke-ValidationWithRetry -Name "Conexi√≥n a Base de Datos" -ScriptBlock {
            # Esta validaci√≥n requerir√≠a acceso a la cadena de conexi√≥n o poder ejecutar consultas
            # Por simplicidad, verificamos que la aplicaci√≥n puede conectarse a s√≠ misma
            $response = Invoke-WebRequest -Uri "$BaseUrl/api/v1/health/extended" -TimeoutSec $TimeoutSeconds -UseBasicParsing -ErrorAction Stop
            $health = $response.Content | ConvertFrom-Json

            # Si el health check extendido pasa y tiene informaci√≥n de BD, asumimos que est√° bien
            return $health.database -ne $null -and $health.database.status -eq "Healthy"
        }

        if (-not $success) {
            Write-Warning "‚ö†Ô∏è Problemas potenciales con la base de datos."
        }
    }

    # Validaci√≥n 8: Rendimiento b√°sico (m√∫ltiples requests simult√°neos)
    Write-Host "üîç Validando rendimiento con requests simult√°neos..." -ForegroundColor Yellow

    $tasks = @()
    1..5 | ForEach-Object {
        $tasks += Invoke-WebRequest -Uri "$BaseUrl/api/v1/health" -TimeoutSec $TimeoutSeconds -UseBasicParsing -ErrorAction SilentlyContinue
    }

    $results = $tasks | Wait-Job | Receive-Job
    $successfulRequests = ($results | Where-Object { $_.StatusCode -eq 200 }).Count

    if ($successfulRequests -ge 3) {
        Write-Host "‚úÖ Rendimiento - PASSED ($successfulRequests/5 requests exitosos)" -ForegroundColor Green

        $ValidationResults += @{
            Name = "Rendimiento B√°sico"
            Status = "PASSED"
            Attempts = 1
            Details = "$successfulRequests de 5 requests simult√°neos exitosos"
        }
    } else {
        Write-Host "‚ùå Rendimiento - FAILED (solo $successfulRequests/5 requests exitosos)" -ForegroundColor Red

        $ValidationResults += @{
            Name = "Rendimiento B√°sico"
            Status = "FAILED"
            Attempts = 1
            Details = "Solo $successfulRequests de 5 requests simult√°neos exitosos"
        }
    }

    # Resumen de validaciones
    Write-Host ""
    Write-Host "üìä RESUMEN DE VALIDACIONES" -ForegroundColor Cyan
    Write-Host "=========================" -ForegroundColor Cyan

    $passed = ($ValidationResults | Where-Object { $_.Status -eq "PASSED" }).Count
    $failed = ($ValidationResults | Where-Object { $_.Status -eq "FAILED" }).Count
    $total = $ValidationResults.Count

    Write-Host "‚úÖ PASSED: $passed/$total" -ForegroundColor Green
    Write-Host "‚ùå FAILED: $failed/$total" -ForegroundColor Red
    Write-Host ""

    foreach ($result in $ValidationResults) {
        $color = if ($result.Status -eq "PASSED") { "Green" } else { "Red" }
        Write-Host "  $($result.Name): $($result.Status)" -ForegroundColor $color
        if ($result.Details) {
            Write-Host "    $($result.Details)" -ForegroundColor Gray
        }
    }

    # Conclusi√≥n
    if ($failed -eq 0) {
        Write-Host ""
        Write-Host "üéâ ¬°VALIDACI√ìN COMPLETA EXITOSA!" -ForegroundColor Green
        Write-Host "‚úÖ La aplicaci√≥n Monitor Impresoras est√° funcionando correctamente" -ForegroundColor Green
        Write-Host "üìä Log de validaci√≥n guardado en: $LogFile" -ForegroundColor Cyan

        return $true
    } else {
        Write-Host ""
        Write-Host "‚ö†Ô∏è VALIDACI√ìN COMPLETADA CON PROBLEMAS" -ForegroundColor Yellow
        Write-Host "‚ùå $failed validaciones fallaron. Revisa los detalles arriba." -ForegroundColor Yellow
        Write-Host "üìä Consulta el log detallado en: $LogFile" -ForegroundColor Cyan

        return $false
    }

}
catch {
    Write-Error "üí• Error cr√≠tico durante la validaci√≥n: $($_.Exception.Message)"
    Write-Host "üìä Consulta el log detallado en: $LogFile" -ForegroundColor Red
    throw
}
finally {
    Stop-Transcript
}
