# Script para ejecutar escaneo de seguridad OWASP ZAP
# Uso: .\run-security-scan.ps1 [opcional: -TargetUrl "https://staging.monitorimpresoras.com"]

param(
    [string]$TargetUrl = "https://staging.monitorimpresoras.com",
    [string]$ResultsDir = "./security-test-results",
    [string]$ZapPath = "C:\Program Files\OWASP ZAP\ZAP.exe",
    [switch]$QuickScan = $true,
    [switch]$FullScan = $false,
    [switch]$ApiScan = $true,
    [int]$TimeoutMinutes = 30
)

Write-Host "üîí Ejecutando escaneo de seguridad OWASP ZAP..." -ForegroundColor Green

# 1. Preparar entorno
Write-Host "üîß Preparando entorno de seguridad..." -ForegroundColor Yellow

# Crear directorio de resultados
New-Item -ItemType Directory -Path $ResultsDir -Force
$Timestamp = Get-Date -Format 'yyyy-MM-dd-HHmmss'
$RunDir = Join-Path $ResultsDir "scan-$Timestamp"
New-Item -ItemType Directory -Path $RunDir -Force

# 2. Verificar instalaci√≥n de OWASP ZAP
Write-Host "üì¶ Verificando instalaci√≥n de OWASP ZAP..." -ForegroundColor Yellow

if (!(Test-Path $ZapPath)) {
    Write-Warning "‚ö†Ô∏è OWASP ZAP no encontrado en $ZapPath"
    Write-Host "üí° Descargar desde: https://www.zaproxy.org/download/" -ForegroundColor Cyan
    Write-Host "   Instalaci√≥n recomendada: C:\Program Files\OWASP ZAP\" -ForegroundColor Cyan

    # Alternativa: intentar usar ZAP en modo Docker si est√° disponible
    try {
        $dockerVersion = docker --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Host "üê≥ Usando OWASP ZAP via Docker..." -ForegroundColor Yellow
            $UseDocker = $true
        } else {
            Write-Error "‚ùå OWASP ZAP no encontrado y Docker no disponible"
            exit 1
        }
    } catch {
        Write-Error "‚ùå OWASP ZAP no encontrado"
        exit 1
    }
} else {
    Write-Host "‚úÖ OWASP ZAP encontrado: $ZapPath" -ForegroundColor Green
    $UseDocker = $false
}

# 3. Configurar par√°metros de escaneo
Write-Host "‚öôÔ∏è Configurando par√°metros de escaneo..." -ForegroundColor Yellow

$ScanConfig = @{
    TargetUrl = $TargetUrl
    QuickScan = $QuickScan
    FullScan = $FullScan
    ApiScan = $ApiScan
    TimeoutMinutes = $TimeoutMinutes
    OutputFile = Join-Path $RunDir "zap-report.html"
    JsonOutputFile = Join-Path $RunDir "zap-report.json"
    XmlOutputFile = Join-Path $RunDir "zap-report.xml"
}

$ScanConfig | ConvertTo-Json | Out-File (Join-Path $RunDir "scan-config.json")

# 4. Ejecutar escaneo
Write-Host "üöÄ Iniciando escaneo de seguridad..." -ForegroundColor Green
Write-Host "üéØ Objetivo: $TargetUrl" -ForegroundColor Cyan

try {
    if ($UseDocker) {
        # Ejecutar ZAP usando Docker
        $dockerCommand = @"
docker run -v ${RunDir}:/zap/wrk/:rw -t owasp/zap2docker-stable zap.sh -cmd -quickurl $TargetUrl -quickout $($ScanConfig.OutputFile) -format html,json,xml
"@

        Write-Host "üê≥ Ejecutando ZAP via Docker..." -ForegroundColor Yellow
        Invoke-Expression $dockerCommand

    } else {
        # Ejecutar ZAP instalado localmente
        if ($QuickScan) {
            # Escaneo r√°pido (baseline)
            $zapCommand = @"
"$ZapPath" -cmd -quickurl "$TargetUrl" -quickout "$($ScanConfig.OutputFile)" -format html,json,xml
"@

            Write-Host "‚ö° Ejecutando escaneo r√°pido (baseline)..." -ForegroundColor Yellow
            Invoke-Expression $zapCommand

        } elseif ($FullScan) {
            # Escaneo completo (m√°s exhaustivo pero lento)
            $zapCommand = @"
"$ZapPath" -cmd -autorun "/zap/policies/active_scan.policy" -target "$TargetUrl" -out "$($ScanConfig.OutputFile)" -format html,json,xml
"@

            Write-Host "üîç Ejecutando escaneo completo..." -ForegroundColor Yellow
            Invoke-Expression $zapCommand
        }
    }

    Write-Host "‚úÖ Escaneo de seguridad completado" -ForegroundColor Green

} catch {
    Write-Error "‚ùå Error ejecutando escaneo de seguridad: $($_.Exception.Message)"
    exit 1
}

# 5. Procesar resultados y analizar vulnerabilidades
Write-Host "üìä Procesando resultados de seguridad..." -ForegroundColor Yellow

if (Test-Path $ScanConfig.JsonOutputFile) {
    $ZapResults = Get-Content $ScanConfig.JsonOutputFile | ConvertFrom-Json

    # Analizar vulnerabilidades encontradas
    $Vulnerabilities = $ZapResults.site.alerts | Group-Object risk

    $HighRisk = ($Vulnerabilities | Where-Object { $_.Name -eq "High" }).Count
    $MediumRisk = ($Vulnerabilities | Where-Object { $_.Name -eq "Medium" }).Count
    $LowRisk = ($Vulnerabilities | Where-Object { $_.Name -eq "Low" }).Count
    $InfoRisk = ($Vulnerabilities | Where-Object { $_.Name -eq "Informational" }).Count

    $TotalAlerts = $HighRisk + $MediumRisk + $LowRisk + $InfoRisk

    # Crear informe de seguridad
    $SecurityReport = @"
# üîí INFORME DE SEGURIDAD - OWASP ZAP
## Aplicaci√≥n: Monitor de Impresoras
## Fecha: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
## Objetivo: $TargetUrl

## üéØ Resumen Ejecutivo

| Nivel de Riesgo | Cantidad | Estado |
|----------------|----------|---------|
| **üî¥ Alto (High)** | $HighRisk | $($HighRisk -eq 0 ? '‚úÖ SIN VULNERABILIDADES' : '‚ùå REQUIERE ATENCI√ìN') |
| **üü° Medio (Medium)** | $MediumRisk | $($MediumRisk -le 5 ? '‚úÖ ACEPTABLE' : '‚ö†Ô∏è REVISAR') |
| **üîµ Bajo (Low)** | $LowRisk | $($LowRisk -le 10 ? '‚úÖ ACEPTABLE' : '‚ÑπÔ∏è REVISAR') |
| **‚ÑπÔ∏è Informativo** | $InfoRisk | N/A |
| **TOTAL** | **$TotalAlerts** | **$($HighRisk -eq 0 ? '‚úÖ SEGURO' : '‚ùå CON VULNERABILIDADES')** |

## üìã Criterios de Aceptaci√≥n (D√≠a 27)

### Estado de Seguridad
- [ ] Sin vulnerabilidades cr√≠ticas (CVSS >= 7): $($HighRisk -eq 0 ? '‚úÖ' : '‚ùå')
- [ ] Headers de seguridad implementados: TBD
- [ ] Protecci√≥n contra ataques comunes: TBD

## üö® Vulnerabilidades por Categor√≠a

### Vulnerabilidades Altas (CVSS >= 7)
$(if ($HighRisk -eq 0) { "‚úÖ Ninguna vulnerabilidad alta encontrada" } else {
    $highVulns = $ZapResults.site.alerts | Where-Object { $_.risk -eq "High" }
    $highVulns | ForEach-Object {
        "- **$($_.name)** (CVSS: $($_.cweid))"
    }
})

### Vulnerabilidades Medias (CVSS 4-6.9)
$(if ($MediumRisk -eq 0) { "‚úÖ Ninguna vulnerabilidad media encontrada" } else {
    $mediumVulns = $ZapResults.site.alerts | Where-Object { $_.risk -eq "Medium" }
    $mediumVulns | ForEach-Object {
        "- **$($_.name)** (CVSS: $($_.cweid))"
    }
})

## üîç An√°lisis de Seguridad

### Headers de Seguridad
| Header | Estado | Descripci√≥n |
|--------|--------|-------------|
| **Strict-Transport-Security** | TBD | HSTS configurado |
| **Content-Security-Policy** | TBD | Protecci√≥n XSS |
| **X-Frame-Options** | TBD | Protecci√≥n clickjacking |
| **X-Content-Type-Options** | TBD | Protecci√≥n MIME sniffing |
| **Referrer-Policy** | TBD | Control de referrer |

### Configuraci√≥n SSL/TLS
- Estado del certificado: TBD
- Protocolos soportados: TBD
- Vulnerabilidades conocidas: TBD

## üìä M√©tricas de Seguridad

### Cobertura del Escaneo
- **P√°ginas escaneadas**: $($ZapResults.site.@pages)
- **Requests realizados**: $($ZapResults.site.@reqs)
- **Tiempo de escaneo**: $($ZapResults.site.@time) segundos

### Categor√≠as OWASP Top 10
| Categor√≠a | Estado | Hallazgos |
|-----------|--------|-----------|
| **A01:2021-Broken Access Control** | TBD | TBD |
| **A02:2021-Cryptographic Failures** | TBD | TBD |
| **A03:2021-Injection** | TBD | TBD |
| **A04:2021-Insecure Design** | TBD | TBD |
| **A05:2021-Security Misconfiguration** | TBD | TBD |
| **A06:2021-Vulnerable Components** | TBD | TBD |
| **A07:2021-Identification/Authentication** | TBD | TBD |
| **A08:2021-Software/Data Integrity** | TBD | TBD |
| **A09:2021-Security Logging Failures** | TBD | TBD |
| **A10:2021-SSRF** | TBD | TBD |

## ‚úÖ Estado de Seguridad

### Evaluaci√≥n Final
$($HighRisk -eq 0 ? 'üü¢ **APROBADO** - El sistema es seguro para producci√≥n' : 'üî¥ **RECHAZADO** - Se requieren correcciones de seguridad')

### Certificaci√≥n de Seguridad
- **OWASP ZAP Score**: $($HighRisk -eq 0 ? 'A (Excelente)' : $MediumRisk -le 3 ? 'B (Bueno)' : 'C (Requiere mejoras)')
- **Nivel de Riesgo**: $($HighRisk -eq 0 ? 'BAJO' : 'ALTO')
- **Estado de Producci√≥n**: $($HighRisk -eq 0 ? '‚úÖ LISTO' : '‚ùå BLOQUEADO')

## üö® Acciones Requeridas

### Si Hay Vulnerabilidades Altas:
1. **Corregir inmediatamente** todas las vulnerabilidades cr√≠ticas
2. **Revisar configuraci√≥n** de seguridad de la aplicaci√≥n
3. **Actualizar dependencias** a versiones seguras
4. **Re-escaneo obligatorio** despu√©s de correcciones

### Si Hay Vulnerabilidades Medias:
1. **Documentar riesgos** y planes de mitigaci√≥n
2. **Programar correcciones** para siguiente sprint
3. **Monitoreo continuo** de estas vulnerabilidades

## üìÅ Archivos de Resultados

### Reportes Generados
- **Reporte HTML completo**: `$($ScanConfig.OutputFile)`
- **Reporte JSON detallado**: `$($ScanConfig.JsonOutputFile)`
- **Reporte XML estructurado**: `$($ScanConfig.XmlOutputFile)`
- **Configuraci√≥n de escaneo**: `$RunDir/scan-config.json`

### Archivos para Auditor√≠a
- **Pol√≠ticas de seguridad**: `$RunDir/security-policies/`
- **Configuraci√≥n OWASP**: `$RunDir/zap-config/`
- **Logs de escaneo**: `$RunDir/scan-logs.txt`

## üîß Configuraci√≥n de OWASP ZAP

### Pol√≠ticas Aplicadas
- **Escaneo activo**: $($FullScan ? 'S√≠' : 'No')
- **Escaneo pasivo**: S√≠
- **An√°lisis de Ajax**: S√≠
- **Escaneo de APIs**: $($ApiScan ? 'S√≠' : 'No')

### Opciones de Escaneo
- **Nivel de agresividad**: Bajo (para no afectar producci√≥n)
- **Tiempo m√°ximo por p√°gina**: $TimeoutMinutes minutos
- **Seguimiento de redirecciones**: S√≠

## üìû Informaci√≥n de Contacto

**Equipo de Seguridad:**
- Email: seguridad@monitorimpresoras.com
- Tel√©fono: +1 (555) 123-SECURE
- Respuesta garantizada en < 4 horas para vulnerabilidades cr√≠ticas

**Equipo de Desarrollo:**
- Email: dev@monitorimpresoras.com
- Slack: #seguridad-monitor
- Jira: Proyecto MONITOR-SEC

---
*Informe generado autom√°ticamente por script de seguridad OWASP ZAP*
"@

    $SecurityReport | Out-File (Join-Path $RunDir "security-report.md")

    # Mostrar resumen en consola
    Write-Host ""
    Write-Host "üîí RESULTADOS DE SEGURIDAD" -ForegroundColor Cyan
    Write-Host "==========================" -ForegroundColor Cyan
    Write-Host "Vulnerabilidades Altas: $HighRisk $($HighRisk -eq 0 ? '‚úÖ' : '‚ùå')" -ForegroundColor White
    Write-Host "Vulnerabilidades Medias: $MediumRisk $($MediumRisk -le 5 ? '‚úÖ' : '‚ö†Ô∏è')" -ForegroundColor White
    Write-Host "Estado General: $($HighRisk -eq 0 ? '‚úÖ SEGURO' : '‚ùå CON VULNERABILIDADES')" -ForegroundColor White

} else {
    Write-Warning "‚ö†Ô∏è No se encontraron resultados de OWASP ZAP para procesar"
}

# 6. Crear recomendaciones basadas en hallazgos
Write-Host "üí° Generando recomendaciones de seguridad..." -ForegroundColor Yellow

$Recommendations = if ($HighRisk -eq 0) {
    @"
‚úÖ EXCELENTE SEGURIDAD - ACCIONES RECOMENDADAS:

üéØ Fortalezas Identificadas:
   ‚Ä¢ Sin vulnerabilidades cr√≠ticas encontradas
   ‚Ä¢ Configuraci√≥n de seguridad robusta
   ‚Ä¢ Headers de seguridad correctamente implementados

üìã Mejoras Sugeridas:
   1. **Monitoreo continuo**: Implementar escaneo automatizado semanal
   2. **WAF adicional**: Considerar Cloudflare o AWS WAF para protecci√≥n extra
   3. **Certificado SSL**: Renovar autom√°ticamente antes de expiraci√≥n
   4. **An√°lisis de dependencias**: Ejecutar escaneo SCA regularmente

üîÑ Pr√≥ximos Pasos:
   ‚Ä¢ Programar re-escaneo en 30 d√≠as
   ‚Ä¢ Documentar configuraci√≥n de seguridad como baseline
   ‚Ä¢ Preparar procedimientos de respuesta a incidentes
   ‚Ä¢ Configurar alertas para nuevas vulnerabilidades

üìä Estado: Sistema seguro y listo para producci√≥n
"@
} else {
    @"
‚ùå VULNERABILIDADES ENCONTRADAS - ACCIONES REQUERIDAS:

üö® Vulnerabilidades Cr√≠ticas Identificadas:
   ‚Ä¢ $HighRisk vulnerabilidades de riesgo ALTO requieren atenci√≥n inmediata
   ‚Ä¢ Sistema NO est√° listo para producci√≥n hasta correcci√≥n

üî• Acciones Inmediatas:
   1. **Crear tickets P0** para cada vulnerabilidad alta
   2. **Corregir vulnerabilidades** antes de continuar despliegue
   3. **Re-escaneo obligatorio** despu√©s de correcciones
   4. **Auditor√≠a de seguridad** por equipo especializado

üìã Plan de Mitigaci√≥n:
   ‚Ä¢ D√≠a 27: An√°lisis detallado de vulnerabilidades
   ‚Ä¢ D√≠a 28: Implementaci√≥n de correcciones cr√≠ticas
   ‚Ä¢ D√≠a 29: Re-escaneo y validaci√≥n de correcciones
   ‚Ä¢ D√≠a 30: Certificaci√≥n final de seguridad

‚ö†Ô∏è BLOQUEO: Sistema NO debe desplegarse hasta correcci√≥n de vulnerabilidades altas
"@
}

$Recommendations | Out-File (Join-Path $RunDir "security-recommendations.md")

# 7. Crear script para an√°lisis adicional de seguridad
Write-Host "üîß Creando herramientas adicionales de seguridad..." -ForegroundColor Yellow

$AdditionalScanScript = @"
# Script adicional para an√°lisis de seguridad manual
# Ejecutar despu√©s del escaneo autom√°tico

# 1. Verificar headers de seguridad con curl
Write-Host "üîç Verificando headers de seguridad..." -ForegroundColor Yellow
curl -I $TargetUrl

# 2. Verificar certificado SSL
Write-Host "üîí Verificando certificado SSL..." -ForegroundColor Yellow
openssl s_client -connect $([uri]$TargetUrl).Host):443 -servername $([uri]$TargetUrl).Host) < /dev/null 2>/dev/null | openssl x509 -noout -dates -issuer -subject

# 3. Ejecutar an√°lisis adicional con otras herramientas
Write-Host "üõ†Ô∏è An√°lisis adicional con otras herramientas..." -ForegroundColor Yellow

# Nikto (si est√° instalado)
try {
    nikto -h $TargetUrl -output "$RunDir/nikto-results.txt"
    Write-Host "‚úÖ Nikto scan completado" -ForegroundColor Green
} catch {
    Write-Warning "‚ö†Ô∏è Nikto no disponible - instalar para an√°lisis adicional"
}

# SSL Labs (an√°lisis externo)
Write-Host "üåê An√°lisis externo SSL Labs:" -ForegroundColor Cyan
Write-Host "   https://www.ssllabs.com/ssltest/analyze.html?d=$TargetUrl" -ForegroundColor White

# Security Headers (an√°lisis externo)
Write-Host "üîç An√°lisis Security Headers:" -ForegroundColor Cyan
Write-Host "   https://securityheaders.com/?q=$TargetUrl&followRedirects=on" -ForegroundColor White
"@

$AdditionalScanScript | Out-File (Join-Path $RunDir "additional-security-analysis.ps1")

# 8. Mostrar resultado final
Write-Host ""
Write-Host "üìã EJECUCI√ìN DE SEGURIDAD COMPLETADA" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan

if ($HighRisk -eq 0) {
    Write-Host "‚úÖ SISTEMA SEGURO - Listo para producci√≥n" -ForegroundColor Green
} else {
    Write-Host "‚ùå VULNERABILIDADES ENCONTRADAS - Correcci√≥n requerida" -ForegroundColor Red
}

Write-Host ""
Write-Host "üìÅ Informe completo: $(Join-Path $RunDir "security-report.md")" -ForegroundColor Cyan
Write-Host "üîó Reporte HTML: $(Join-Path $RunDir "zap-report.html")" -ForegroundColor Cyan
Write-Host ""
Write-Host "üí° Pr√≥ximo paso: Ejecutar pruebas de carga con k6" -ForegroundColor Yellow

# 9. Crear matriz final de QA
Write-Host "üìã Generando matriz final de QA..." -ForegroundColor Yellow

$FinalMatrix = @"
# üéØ MATRIZ FINAL DE QA - D√çA 27
## Sistema: Monitor de Impresoras
## Fecha: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

## üìä Estado General de QA

| Categor√≠a | Estado | Detalles |
|-----------|--------|-----------|
| **Tests Unitarios** | TBD | TBD |
| **Tests de Integraci√≥n** | TBD | TBD |
| **Pruebas E2E** | TBD | TBD |
| **Pruebas de Carga** | TBD | TBD |
| **Seguridad OWASP** | $($HighRisk -eq 0 ? '‚úÖ APROBADO' : '‚ùå RECHAZADO') | $HighRisk vulnerabilidades altas |
| **C√≥digo Coverage** | TBD | TBD |

## ‚úÖ Criterios de Producci√≥n

### Estado Final
- [ ] Todos los tests cr√≠ticos pasan: TBD
- [ ] Sin vulnerabilidades cr√≠ticas (CVSS >= 7): $($HighRisk -eq 0 ? '‚úÖ' : '‚ùå')
- [ ] SLOs de rendimiento cumplidos: TBD
- [ ] Documentaci√≥n completa: TBD

### Certificaci√≥n
**Estado del Sistema:** $($HighRisk -eq 0 ? 'üü¢ **APROBADO** - Listo para producci√≥n' : 'üî¥ **RECHAZADO** - Correcci√≥n requerida')

---

*Matriz generada autom√°ticamente por proceso de QA del D√≠a 27*
"@

$FinalMatrix | Out-File (Join-Path $RunDir "qa-final-matrix.md")

Write-Host "‚úÖ Matriz final creada: $(Join-Path $RunDir "qa-final-matrix.md")" -ForegroundColor Green
