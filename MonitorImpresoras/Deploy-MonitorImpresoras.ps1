#requires -Version 5.1
<#
.SYNOPSIS
    Script de despliegue para MonitorImpresoras en Windows Server + IIS

.DESCRIPTION
    Este script automatiza el despliegue de la aplicaci√≥n MonitorImpresoras
    en un servidor Windows Server con IIS instalado.

.PARAMETER SourcePath
    Ruta local donde se encuentran los archivos compilados de la aplicaci√≥n

.PARAMETER DestinationPath
    Ruta en el servidor IIS donde se desplegar√° la aplicaci√≥n (ej: C:\inetpub\MonitorImpresoras)

.PARAMETER AppPoolName
    Nombre del Application Pool en IIS (por defecto: MonitorImpresorasPool)

.PARAMETER SiteName
    Nombre del sitio web en IIS (por defecto: MonitorImpresoras)

.PARAMETER BackupBeforeDeploy
    Si se debe crear una copia de seguridad antes del despliegue

.EXAMPLE
    .\Deploy-MonitorImpresoras.ps1 -SourcePath "C:\Build\publish" -DestinationPath "C:\inetpub\MonitorImpresoras"
#>

[CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]$SourcePath,

    [Parameter(Mandatory=$true)]
    [string]$DestinationPath,

    [string]$AppPoolName = "MonitorImpresorasPool",
    [string]$SiteName = "MonitorImpresoras",
    [switch]$BackupBeforeDeploy,

    [string]$ConnectionString = "",
    [switch]$SkipHealthCheck
)

# Importar m√≥dulos necesarios
Import-Module WebAdministration -ErrorAction Stop

# Configuraci√≥n de logging
$LogFile = Join-Path $env:TEMP "MonitorImpresoras-Deploy-$(Get-Date -Format 'yyyyMMdd-HHmmss').log"
Start-Transcript -Path $LogFile -Append

Write-Host "üöÄ Iniciando despliegue de MonitorImpresoras..." -ForegroundColor Green

try {
    # 1. Verificar que el directorio fuente existe
    if (-not (Test-Path $SourcePath)) {
        throw "El directorio fuente no existe: $SourcePath"
    }

    Write-Host "‚úÖ Directorio fuente verificado: $SourcePath" -ForegroundColor Green

    # 2. Crear copia de seguridad si se solicita
    if ($BackupBeforeDeploy) {
        $BackupPath = Join-Path $DestinationPath.Parent "Backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
        Write-Host "üì¶ Creando copia de seguridad en: $BackupPath" -ForegroundColor Yellow

        if (Test-Path $DestinationPath) {
            Copy-Item $DestinationPath $BackupPath -Recurse -Force
            Write-Host "‚úÖ Copia de seguridad creada exitosamente" -ForegroundColor Green
        }
    }

    # 3. Crear directorio de destino si no existe
    if (-not (Test-Path $DestinationPath)) {
        New-Item -ItemType Directory -Path $DestinationPath -Force | Out-Null
        Write-Host "üìÅ Directorio de destino creado: $DestinationPath" -ForegroundColor Green
    }

    # 4. Detener el sitio web si existe
    $existingSite = Get-IISSite | Where-Object { $_.Name -eq $SiteName }
    if ($existingSite) {
        Write-Host "‚èπÔ∏è Deteniendo sitio web existente: $SiteName" -ForegroundColor Yellow
        Stop-IISSite -Name $SiteName -Confirm:$false

        # Esperar a que se detenga completamente
        do {
            Start-Sleep -Seconds 2
            $siteState = Get-IISSiteState -Name $SiteName
        } while ($siteState.Value -ne "Stopped")

        Write-Host "‚úÖ Sitio web detenido" -ForegroundColor Green
    }

    # 5. Copiar archivos de la aplicaci√≥n
    Write-Host "üìã Copiando archivos de la aplicaci√≥n..." -ForegroundColor Yellow

    # Usar robocopy para copia eficiente
    $robocopyArgs = @(
        $SourcePath,
        $DestinationPath,
        "/MIR",        # Mirror: copia y elimina archivos obsoletos
        "/COPY:DAT",   # Copia datos, atributos y timestamps
        "/DCOPY:T",    # Copia timestamps de directorios
        "/R:3",        # Reintentos: 3
        "/W:5",        # Espera entre reintentos: 5 segundos
        "/LOG+:$LogFile",
        "/NP",         # Sin progreso (m√°s limpio)
        "/NFL",        # Sin nombres de archivo en log
        "/NDL"         # Sin nombres de directorio en log
    )

    $result = & robocopy $robocopyArgs

    if ($LASTEXITCODE -ge 8) {
        throw "Error durante la copia de archivos. C√≥digo de salida: $LASTEXITCODE"
    }

    Write-Host "‚úÖ Archivos copiados exitosamente" -ForegroundColor Green

    # 6. Crear o configurar Application Pool si no existe
    $appPool = Get-IISAppPool | Where-Object { $_.Name -eq $AppPoolName }
    if (-not $appPool) {
        Write-Host "üèä Creando Application Pool: $AppPoolName" -ForegroundColor Yellow
        New-IISAppPool -Name $AppPoolName
        Set-ItemProperty "IIS:\AppPools\$AppPoolName" -Name "managedRuntimeVersion" -Value ""
        Set-ItemProperty "IIS:\AppPools\$AppPoolName" -Name "managedPipelineMode" -Value 0
        Set-ItemProperty "IIS:\AppPools\$AppPoolName" -Name "processModel.identityType" -Value 2 # NetworkService
        Set-ItemProperty "IIS:\AppPools\$AppPoolName" -Name "recycling.periodicRestart.time" -Value "00:00:00"
        Set-ItemProperty "IIS:\AppPools\$AppPoolName" -Name "recycling.periodicRestart.requests" -Value 0
        Write-Host "‚úÖ Application Pool creado y configurado" -ForegroundColor Green
    }

    # 7. Crear o configurar sitio web
    if ($existingSite) {
        Write-Host "üåê Actualizando sitio web existente: $SiteName" -ForegroundColor Yellow
        Set-ItemProperty "IIS:\Sites\$SiteName" -Name "applicationPool" -Value $AppPoolName
        Set-ItemProperty "IIS:\Sites\$SiteName" -Name "physicalPath" -Value $DestinationPath
    } else {
        Write-Host "üåê Creando nuevo sitio web: $SiteName" -ForegroundColor Yellow
        New-IISSite -Name $SiteName -PhysicalPath $DestinationPath -BindingInformation "*:80:" -ApplicationPool $AppPoolName
    }

    # 8. Configurar permisos NTFS
    Write-Host "üîê Configurando permisos NTFS..." -ForegroundColor Yellow

    $acl = Get-Acl $DestinationPath
    $networkServiceRule = New-Object System.Security.AccessControl.FileSystemAccessRule(
        "NETWORK SERVICE",
        "FullControl",
        "ContainerInherit,ObjectInherit",
        "None",
        "Allow"
    )
    $iisIusrsRule = New-Object System.Security.AccessControl.FileSystemAccessRule(
        "IIS_IUSRS",
        "ReadAndExecute",
        "ContainerInherit,ObjectInherit",
        "None",
        "Allow"
    )

    $acl.SetAccessRule($networkServiceRule)
    $acl.SetAccessRule($iisIusrsRule)
    Set-Acl $DestinationPath $acl

    Write-Host "‚úÖ Permisos NTFS configurados" -ForegroundColor Green

    # 9. Ejecutar migraciones de base de datos si hay conexi√≥n
    if ($ConnectionString -and (Test-Path (Join-Path $DestinationPath "*.dll"))) {
        Write-Host "üóÑÔ∏è Ejecutando migraciones de base de datos..." -ForegroundColor Yellow

        $migrationPath = Join-Path $DestinationPath "dotnet-ef-database-update.ps1"
        $migrationScript = @"
cd '$DestinationPath'
dotnet ef database update --context ApplicationDbContext --connection-string '$ConnectionString'
"@

        $migrationScript | Out-File $migrationPath -Encoding UTF8

        try {
            & $migrationPath
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Migraciones ejecutadas exitosamente" -ForegroundColor Green
            } else {
                Write-Warning "‚ö†Ô∏è Migraciones completadas con warnings (c√≥digo: $LASTEXITCODE)"
            }
        }
        catch {
            Write-Warning "‚ö†Ô∏è Error durante las migraciones: $($_.Exception.Message)"
        }
        finally {
            Remove-Item $migrationPath -ErrorAction SilentlyContinue
        }
    }

    # 10. Iniciar el sitio web
    Write-Host "‚ñ∂Ô∏è Iniciando sitio web: $SiteName" -ForegroundColor Yellow
    Start-IISSite -Name $SiteName -Confirm:$false

    # Esperar a que se inicie completamente
    do {
        Start-Sleep -Seconds 3
        $siteState = Get-IISSiteState -Name $SiteName
    } while ($siteState.Value -ne "Started")

    Write-Host "‚úÖ Sitio web iniciado exitosamente" -ForegroundColor Green

    # 11. Health check si no se omite
    if (-not $SkipHealthCheck) {
        Write-Host "üè• Realizando health check..." -ForegroundColor Yellow

        $healthCheckUrl = "http://localhost/api/v1/health"
        $maxAttempts = 10
        $attempt = 1

        do {
            try {
                $response = Invoke-WebRequest -Uri $healthCheckUrl -TimeoutSec 10 -ErrorAction Stop
                if ($response.StatusCode -eq 200) {
                    Write-Host "‚úÖ Health check exitoso" -ForegroundColor Green
                    break
                }
            }
            catch {
                Write-Host "‚è≥ Intento $attempt de $maxAttempts - Health check fallido, reintentando..." -ForegroundColor Yellow
                Start-Sleep -Seconds 5
            }
            $attempt++
        } while ($attempt -le $maxAttempts)

        if ($attempt -gt $maxAttempts) {
            throw "Health check fallido despu√©s de $maxAttempts intentos"
        }
    }

    Write-Host "üéâ ¬°Despliegue completado exitosamente!" -ForegroundColor Green
    Write-Host "üìä Log de despliegue guardado en: $LogFile" -ForegroundColor Cyan

}
catch {
    Write-Error "‚ùå Error durante el despliegue: $($_.Exception.Message)"
    Write-Host "üìä Consulta el log detallado en: $LogFile" -ForegroundColor Red

    # Si hubo error, intentar restaurar desde backup si existe
    if ($BackupBeforeDeploy -and (Test-Path $BackupPath)) {
        Write-Host "üîÑ Restaurando desde copia de seguridad..." -ForegroundColor Yellow

        if (Test-Path $DestinationPath) {
            Remove-Item $DestinationPath -Recurse -Force -ErrorAction SilentlyContinue
        }

        Copy-Item $BackupPath $DestinationPath -Recurse -Force
        Write-Host "‚úÖ Restauraci√≥n completada" -ForegroundColor Green
    }

    throw
}
finally {
    Stop-Transcript
}

# Funci√≥n auxiliar para verificar si IIS est√° instalado
function Test-IISInstalled {
    return (Get-Service W3SVC -ErrorAction SilentlyContinue) -ne $null
}

# Funci√≥n auxiliar para verificar permisos de administrador
function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

# Verificaciones iniciales
if (-not (Test-Administrator)) {
    throw "Este script debe ejecutarse como Administrador"
}

if (-not (Test-IISInstalled)) {
    throw "IIS no est√° instalado en este servidor"
}
