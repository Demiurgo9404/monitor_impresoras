@inject ApiService ApiService
@inject TenantService TenantService
@inject IJSRuntime JSRuntime

<div class="card shadow-custom mb-4">
    <div class="card-header bg-white">
        <h5 class="card-title mb-0">
            <i class="fas fa-bolt text-warning me-2"></i>
            Reportes Rápidos
        </h5>
    </div>
    <div class="card-body">
        <div class="row g-3">
            <div class="col-lg-4 col-md-6">
                <div class="card h-100 border-2 border-primary template-card" @onclick="() => GenerateQuickReport('Monthly')">
                    <div class="card-body text-center">
                        <div class="template-preview mb-3">
                            <i class="fas fa-calendar-alt fa-3x text-primary"></i>
                        </div>
                        <h6 class="card-title">Reporte Mensual</h6>
                        <p class="card-text text-muted small">
                            Resumen completo del último mes con contadores, consumibles y costos.
                        </p>
                        <div class="mt-auto">
                            <span class="badge bg-primary">PDF</span>
                            <span class="badge bg-success">Excel</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-4 col-md-6">
                <div class="card h-100 border-2 border-success template-card" @onclick="() => GenerateQuickReport('Weekly')">
                    <div class="card-body text-center">
                        <div class="template-preview mb-3">
                            <i class="fas fa-chart-line fa-3x text-success"></i>
                        </div>
                        <h6 class="card-title">Reporte Semanal</h6>
                        <p class="card-text text-muted small">
                            Análisis de la última semana con tendencias y alertas.
                        </p>
                        <div class="mt-auto">
                            <span class="badge bg-primary">PDF</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-4 col-md-6">
                <div class="card h-100 border-2 border-info template-card" @onclick="() => GenerateQuickReport('Custom')">
                    <div class="card-body text-center">
                        <div class="template-preview mb-3">
                            <i class="fas fa-cog fa-3x text-info"></i>
                        </div>
                        <h6 class="card-title">Reporte Personalizado</h6>
                        <p class="card-text text-muted small">
                            Configura fechas y contenido según tus necesidades específicas.
                        </p>
                        <div class="mt-auto">
                            <span class="badge bg-info">Configurable</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (isGenerating)
        {
            <div class="text-center mt-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Generando reporte...</span>
                </div>
                <p class="mt-2 text-muted">Generando reporte rápido...</p>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public EventCallback OnReportGenerated { get; set; }
    
    private bool isGenerating = false;

    private async Task GenerateQuickReport(string reportType)
    {
        if (isGenerating) return;

        isGenerating = true;
        StateHasChanged();

        try
        {
            var projects = await TenantService.GetTenantProjectsAsync();
            if (!projects.Any())
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Sin proyectos", "No hay proyectos disponibles para generar reportes", "warning");
                return;
            }

            var firstProject = projects.First();
            var (startDate, endDate, title) = GetDateRangeForType(reportType, firstProject.Name);

            var quickReportRequest = new GenerateReportRequest
            {
                ProjectId = firstProject.Id,
                ReportType = reportType,
                PeriodStart = startDate,
                PeriodEnd = endDate,
                Format = reportType == "Monthly" ? "Both" : "PDF",
                Title = title,
                IncludeCounters = true,
                IncludeConsumables = true,
                IncludeCosts = true,
                IncludeCharts = true,
                SendByEmail = false
            };

            var report = await ApiService.PostAsync<GenerateReportRequest, ReportSummary>("/api/report/generate", quickReportRequest);
            
            if (report != null)
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Reporte Generado", $"Reporte {reportType.ToLower()} generado correctamente", "success");
                await OnReportGenerated.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "Error", $"Error generando reporte: {ex.Message}", "error");
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private (DateTime startDate, DateTime endDate, string title) GetDateRangeForType(string reportType, string projectName)
    {
        var now = DateTime.UtcNow;
        
        return reportType switch
        {
            "Monthly" => (
                now.AddMonths(-1).Date,
                now.Date,
                $"Reporte Mensual - {projectName} - {now.AddMonths(-1):MMMM yyyy}"
            ),
            "Weekly" => (
                now.AddDays(-7).Date,
                now.Date,
                $"Reporte Semanal - {projectName} - {now.AddDays(-7):dd/MM} al {now:dd/MM/yyyy}"
            ),
            "Custom" => (
                now.AddDays(-30).Date,
                now.Date,
                $"Reporte Personalizado - {projectName} - {now:dd/MM/yyyy}"
            ),
            _ => (now.AddMonths(-1).Date, now.Date, $"Reporte - {projectName}")
        };
    }
}

