using System;
using System.Threading.Tasks;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Extensions.Logging;
using MonitorImpresoras.Application.Interfaces;
using MonitorImpresoras.Domain.Entities;
using MonitorImpresoras.Domain.Interfaces;
using MonitorImpresoras.Domain.Enums;
using MonitorImpresoras.Domain.DTOs;

namespace MonitorImpresoras.Application.Services
{
    public class AlertService : IAlertService
    {
        private readonly IRepository<Alert> _alertRepository;
        private readonly IPrinterRepository _printerRepository;
        private readonly ILogger<AlertService> _logger;

        public AlertService(
            IRepository<Alert> alertRepository,
            IPrinterRepository printerRepository,
            ILogger<AlertService> logger)
        {
            _alertRepository = alertRepository ?? throw new ArgumentNullException(nameof(alertRepository));
            _printerRepository = printerRepository ?? throw new ArgumentNullException(nameof(printerRepository));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        public async Task<AlertDTO> CreateAlertAsync(CreateAlertDTO alertDto)
        {
            try
            {
                if (alertDto == null)
                {
                    throw new ArgumentNullException(nameof(alertDto));
                }

                // Create alert entity
                var alert = new Alert
                {
                    TenantId = alertDto.TenantId, // Default tenant if not specified
                    Type = alertDto.Type,
                    Title = alertDto.Title,
                    Description = alertDto.Description,
                    Severity = alertDto.Severity,
                    Status = AlertStatus.Open,
                    IsAutoGenerated = alertDto.IsAutoGenerated,
                    CreatedAt = DateTime.UtcNow,
                    Source = alertDto.Source ?? "System"
                };

                await _alertRepository.AddAsync(alert);
                await _alertRepository.SaveChangesAsync();

                _logger.LogInformation(
                    "Alert created successfully. Type: {AlertType}, Severity: {Severity}, Title: {Title}",
                    alert.Type, alert.Severity, alert.Title);

                // Convert to DTO
                return new AlertDTO
                {
                    Id = alert.Id,
                    TenantId = alert.TenantId,
                    Type = alert.Type,
                    Title = alert.Title,
                    Description = alert.Description,
                    Severity = alert.Severity,
                    Status = alert.Status,
                    IsAutoGenerated = alert.IsAutoGenerated,
                    CreatedAt = alert.CreatedAt,
                    Source = alert.Source,
                    ResolutionNotes = alert.ResolutionNotes
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating alert with title: {Title}", alertDto?.Title);
                throw new ApplicationException("Failed to create alert", ex);
            }
        }

        public async Task<AlertDTO> GetAlertByIdAsync(Guid id)
        {
            var alert = await _alertRepository.GetByIdAsync(id);
            if (alert == null)
            {
                throw new KeyNotFoundException($"Alert with ID {id} not found");
            }

            return new AlertDTO
            {
                Id = alert.Id,
                TenantId = alert.TenantId,
                Type = alert.Type,
                Title = alert.Title,
                Description = alert.Description,
                Severity = alert.Severity,
                Status = alert.Status,
                IsAutoGenerated = alert.IsAutoGenerated,
                CreatedAt = alert.CreatedAt,
                Source = alert.Source,
                ResolutionNotes = alert.ResolutionNotes
            };
        }

        public async Task<IEnumerable<AlertDTO>> GetAlertsByFilterAsync(AlertFilterDTO filter)
        {
            var alerts = await _alertRepository.GetAllAsync();
            return alerts.Select(alert => new AlertDTO
            {
                Id = alert.Id,
                TenantId = alert.TenantId,
                Type = alert.Type,
                Title = alert.Title,
                Description = alert.Description,
                Severity = alert.Severity,
                Status = alert.Status,
                IsAutoGenerated = alert.IsAutoGenerated,
                CreatedAt = alert.CreatedAt,
                Source = alert.Source,
                ResolutionNotes = alert.ResolutionNotes
            });
        }

        public async Task<AlertDTO> UpdateAlertAsync(Guid id, UpdateAlertDTO alertDto, string userId)
        {
            var alert = await _alertRepository.GetByIdAsync(id);
            if (alert == null)
            {
                throw new KeyNotFoundException($"Alert with ID {id} not found");
            }

            if (!string.IsNullOrEmpty(alertDto.Title))
                alert.Title = alertDto.Title;

            if (!string.IsNullOrEmpty(alertDto.Description))
                alert.Description = alertDto.Description;

            if (alertDto.Severity.HasValue)
                alert.Severity = alertDto.Severity.Value;

            if (alertDto.Status.HasValue)
                alert.Status = alertDto.Status.Value;

            await _alertRepository.UpdateAsync(alert);
            await _alertRepository.SaveChangesAsync();

            return new AlertDTO
            {
                Id = alert.Id,
                TenantId = alert.TenantId,
                Type = alert.Type,
                Title = alert.Title,
                Description = alert.Description,
                Severity = alert.Severity,
                Status = alert.Status,
                IsAutoGenerated = alert.IsAutoGenerated,
                CreatedAt = alert.CreatedAt,
                Source = alert.Source,
                ResolutionNotes = alert.ResolutionNotes
            };
        }

        public async Task<AlertStatsDTO> GetAlertStatsAsync()
        {
            var alerts = await _alertRepository.GetAllAsync();

            return new AlertStatsDTO
            {
                TotalAlerts = alerts.Count(),
                OpenAlerts = alerts.Count(a => a.Status == AlertStatus.Open),
                AcknowledgedAlerts = alerts.Count(a => a.Status == AlertStatus.Acknowledged),
                ResolvedAlerts = alerts.Count(a => a.Status == AlertStatus.Resolved),
                HighSeverityAlerts = alerts.Count(a => a.Severity == AlertSeverity.High),
                MediumSeverityAlerts = alerts.Count(a => a.Severity == AlertSeverity.Medium),
                LowSeverityAlerts = alerts.Count(a => a.Severity == AlertSeverity.Low),
                AlertsByType = alerts.GroupBy(a => a.Type).ToDictionary(g => g.Key, g => g.Count()),
                AlertsByStatus = alerts.GroupBy(a => a.Status).ToDictionary(g => g.Key, g => g.Count()),
                AlertsBySeverity = alerts.GroupBy(a => a.Severity).ToDictionary(g => g.Key, g => g.Count())
            };
        }

        public async Task AcknowledgeAlertAsync(Guid id, string userId)
        {
            var alert = await _alertRepository.GetByIdAsync(id);
            if (alert == null)
            {
                throw new KeyNotFoundException($"Alert with ID {id} not found");
            }

            alert.Status = AlertStatus.Acknowledged;
            await _alertRepository.UpdateAsync(alert);
            await _alertRepository.SaveChangesAsync();
        }

        public async Task ResolveAlertAsync(Guid id, string resolutionNotes, string userId)
        {
            var alert = await _alertRepository.GetByIdAsync(id);
            if (alert == null)
            {
                throw new KeyNotFoundException($"Alert with ID {id} not found");
            }

            alert.Status = AlertStatus.Resolved;
            alert.ResolutionNotes = resolutionNotes;
            await _alertRepository.UpdateAsync(alert);
            await _alertRepository.SaveChangesAsync();
        }
    }
}
